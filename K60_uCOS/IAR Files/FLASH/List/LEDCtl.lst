###############################################################################
#                                                                             #
#                                                       03/Nov/2015  20:45:52 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\LEDCtl\LEDCtl.c #
#    Command line =  C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\LEDCtl\LEDCtl.c #
#                     -D COMPILER_IAR -lCN "C:\Users\WangChangan\Desktop\K10Ð #
#                    ¡°å¶¨¸å\IAR Files\FLASH\List\" -lB                       #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\FLASH\List\" -o "C:\Users\WangChangan\Desktop\K10Ð #
#                    ¡°å¶¨¸å\IAR Files\FLASH\Obj\" --no_cse --no_unroll       #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\Project_Headers\" -I                            #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\KinetisDrivers\" -I                             #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\ExtraFunction\" -I                              #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\Hardware_Interface\" -I                         #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\Make_Decision\" -I                              #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\Math\" -I "C:\Users\WangChangan\Desktop\K10Ð¡°å #
#                    ¶¨¸å\IAR Files\..\Original_Process\" -I                  #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\Platform\" -I "C:\Users\WangChangan\Desktop\K10 #
#                    Ð¡°å¶¨¸å\IAR Files\..\SD_System\" -I                     #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\Source\" -I "C:\Users\WangChangan\Desktop\K10Ð¡ #
#                    °å¶¨¸å\IAR Files\..\System_Init\" -Ol                    #
#    List file    =  C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR             #
#                    Files\FLASH\List\LEDCtl.lst                              #
#    Object file  =  C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR             #
#                    Files\FLASH\Obj\LEDCtl.o                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\LEDCtl\LEDCtl.c
      1          /************************************************************************************************
      2          
      3          * LEDCtl.c
      4          
      5          * Ö¸Ê¾µÆ¿ØÖÆÆ÷
      6            
      7          * Ö÷¿ØÐ¾Æ¬£ºMK10DN512VLL10
      8            ¿ª·¢Æ½Ì¨£ºIAR Embedded Workbench 6.3
      9            
     10          * ×÷Õß£º Íõ²ý°²  (µÚÊ®½ìÉãÏñÍ·)  
     11          
     12          ************************************************************************************************/
     13          #include "./LEDCtl.h"
     14          
     15          #if EN_LED != 0
     16          

   \                                 In section .bss, align 4
     17          static LEDData_t LEDQueue[LEDColorEnd];         /*LED¿ØÖÆ»º³å¶ÓÁÐ*/
   \                     LEDQueue:
   \   00000000                      DS8 180
     18          

   \                                 In section .text, align 2, keep-with-next
     19          static void setGreenLED(LedState state)
     20          {
     21            if(LED_ON == state)
   \                     setGreenLED:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD108             BNE.N    ??setGreenLED_0
     22            {
     23              (LED_PT_GREEN)->PCOR |= (1<<LED_INDEX_GREEN);
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable8  ;; 0x400ff088
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable8  ;; 0x400ff088
   \   00000014   0x6008             STR      R0,[R1, #+0]
   \   00000016   0xE007             B.N      ??setGreenLED_1
     24            }
     25            else
     26            {
     27              (LED_PT_GREEN)->PSOR |= (1<<LED_INDEX_GREEN);
   \                     ??setGreenLED_0:
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable8_1  ;; 0x400ff084
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable8_1  ;; 0x400ff084
   \   00000026   0x6008             STR      R0,[R1, #+0]
     28            }
     29          }
   \                     ??setGreenLED_1:
   \   00000028   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     30          static void setRedLED(LedState state)
     31          {
     32            if(LED_ON == state)
   \                     setRedLED:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD109             BNE.N    ??setRedLED_0
     33            {
     34              (LED_PT_RED)->PCOR |= (1<<LED_INDEX_RED);
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable8  ;; 0x400ff088
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF44F 0x7100      MOV      R1,#+512
   \   00000010   0x4308             ORRS     R0,R1,R0
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable8  ;; 0x400ff088
   \   00000016   0x6008             STR      R0,[R1, #+0]
   \   00000018   0xE008             B.N      ??setRedLED_1
     35            }
     36            else
     37            {
     38              (LED_PT_RED)->PSOR |= (1<<LED_INDEX_RED);
   \                     ??setRedLED_0:
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable8_1  ;; 0x400ff084
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF44F 0x7100      MOV      R1,#+512
   \   00000024   0x4308             ORRS     R0,R1,R0
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable8_1  ;; 0x400ff084
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     39            }
     40          }
   \                     ??setRedLED_1:
   \   0000002C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     41          static void setWhiteLED(LedState state)
     42          {
     43            if(LED_ON == state)
   \                     setWhiteLED:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD108             BNE.N    ??setWhiteLED_0
     44            {
     45              (LED_PT_WHITE)->PCOR |= (1<<LED_INDEX_WHITE);
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable8  ;; 0x400ff088
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable8  ;; 0x400ff088
   \   00000014   0x6008             STR      R0,[R1, #+0]
   \   00000016   0xE007             B.N      ??setWhiteLED_1
     46            }
     47            else
     48            {
     49              (LED_PT_WHITE)->PSOR |= (1<<LED_INDEX_WHITE);
   \                     ??setWhiteLED_0:
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable8_1  ;; 0x400ff084
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable8_1  ;; 0x400ff084
   \   00000026   0x6008             STR      R0,[R1, #+0]
     50            }
     51          }
   \                     ??setWhiteLED_1:
   \   00000028   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     52          static void LED_IOInit(void)
     53          {
     54            ((LED_PORT_GREEN)->PCR[LED_INDEX_GREEN]) = PORT_PCR_MUX(1);
   \                     LED_IOInit:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable8_2  ;; 0x4004b01c
   \   00000004   0xF44F 0x7180      MOV      R1,#+256
   \   00000008   0x6001             STR      R1,[R0, #+0]
     55            (LED_PT_GREEN)->PDDR |= (1<<LED_INDEX_GREEN); 
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x400ff094
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x400ff094
   \   00000018   0x6008             STR      R0,[R1, #+0]
     56            
     57            (LED_PORT_RED)->PCR[LED_INDEX_RED] = PORT_PCR_MUX(1);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable8_4  ;; 0x4004b024
   \   0000001E   0xF44F 0x7180      MOV      R1,#+256
   \   00000022   0x6001             STR      R1,[R0, #+0]
     58            (LED_PT_RED)->PDDR |= (1<<LED_INDEX_RED);
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x400ff094
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF44F 0x7100      MOV      R1,#+512
   \   0000002E   0x4308             ORRS     R0,R1,R0
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x400ff094
   \   00000034   0x6008             STR      R0,[R1, #+0]
     59            
     60            (LED_PORT_WHITE)->PCR[LED_INDEX_WHITE] = PORT_PCR_MUX(1);
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable8_5  ;; 0x4004b02c
   \   0000003A   0xF44F 0x7180      MOV      R1,#+256
   \   0000003E   0x6001             STR      R1,[R0, #+0]
     61            (LED_PT_WHITE)->PDDR |= (1<<LED_INDEX_WHITE);
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x400ff094
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x400ff094
   \   0000004E   0x6008             STR      R0,[R1, #+0]
     62          }
   \   00000050   0x4770             BX       LR               ;; return
     63          

   \                                 In section .text, align 2, keep-with-next
     64          static void LED_QueueInit()
     65          { 
     66            for(INT8U index = LEDColorStart;index < LEDColorEnd;++index)
   \                     LED_QueueInit:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE023             B.N      ??LED_QueueInit_0
     67            {
     68              LEDQueue[index].Tim = 0;
   \                     ??LED_QueueInit_1:
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x213C             MOVS     R1,#+60
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable8_6
   \   0000000C   0xFB01 0x2100      MLA      R1,R1,R0,R2
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x800A             STRH     R2,[R1, #+0]
     69              LEDQueue[index].Queue_Head = 0;
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x213C             MOVS     R1,#+60
   \   00000018   0x.... 0x....      LDR.W    R2,??DataTable8_6
   \   0000001C   0xFB01 0x2100      MLA      R1,R1,R0,R2
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0xF881 0x2032      STRB     R2,[R1, #+50]
     70              LEDQueue[index].Queue_Rear = 0;
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x213C             MOVS     R1,#+60
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable8_6
   \   0000002E   0xFB01 0x2100      MLA      R1,R1,R0,R2
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0xF881 0x2033      STRB     R2,[R1, #+51]
     71              LEDQueue[index].Queue_Stat = Empty; 
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x213C             MOVS     R1,#+60
   \   0000003C   0x.... 0x....      LDR.W    R2,??DataTable8_6
   \   00000040   0xFB01 0x2100      MLA      R1,R1,R0,R2
   \   00000044   0x2202             MOVS     R2,#+2
   \   00000046   0xF881 0x2034      STRB     R2,[R1, #+52]
     72            }
   \   0000004A   0x1C40             ADDS     R0,R0,#+1
   \                     ??LED_QueueInit_0:
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x2803             CMP      R0,#+3
   \   00000050   0xD3D8             BCC.N    ??LED_QueueInit_1
     73            LEDQueue[Green].setLED = setGreenLED;
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable8_7
   \   0000005A   0x6381             STR      R1,[R0, #+56]
     74            LEDQueue[Red].setLED = setRedLED;
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable8_8
   \   00000064   0x6741             STR      R1,[R0, #+116]
     75            LEDQueue[White].setLED = setWhiteLED;
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable8_9
   \   0000006E   0xF8C0 0x10B0      STR      R1,[R0, #+176]
     76          }
   \   00000072   0x4770             BX       LR               ;; return
     77          

   \                                 In section .text, align 2, keep-with-next
     78          static void LedQStaUpdate(INT8U id,LedQState state)
     79          {
   \                     LedQStaUpdate:
   \   00000000   0xB410             PUSH     {R4}
     80            if(LEDQueue[id].Queue_Head == LEDQueue[id].Queue_Rear)
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x223C             MOVS     R2,#+60
   \   00000006   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   0000000A   0xFB02 0x3200      MLA      R2,R2,R0,R3
   \   0000000E   0xF892 0x2032      LDRB     R2,[R2, #+50]
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x233C             MOVS     R3,#+60
   \   00000016   0x.... 0x....      LDR.W    R4,??DataTable8_6
   \   0000001A   0xFB03 0x4300      MLA      R3,R3,R0,R4
   \   0000001E   0xF893 0x3033      LDRB     R3,[R3, #+51]
   \   00000022   0x429A             CMP      R2,R3
   \   00000024   0xD108             BNE.N    ??LedQStaUpdate_0
     81            {
     82              LEDQueue[id].Queue_Stat = state;
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x223C             MOVS     R2,#+60
   \   0000002A   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   0000002E   0xFB02 0x3000      MLA      R0,R2,R0,R3
   \   00000032   0xF880 0x1034      STRB     R1,[R0, #+52]
   \   00000036   0xE008             B.N      ??LedQStaUpdate_1
     83            }
     84            else
     85            {
     86              LEDQueue[id].Queue_Stat = Normal;
   \                     ??LedQStaUpdate_0:
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x213C             MOVS     R1,#+60
   \   0000003C   0x.... 0x....      LDR.W    R2,??DataTable8_6
   \   00000040   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0xF880 0x1034      STRB     R1,[R0, #+52]
     87            }
     88          }
   \                     ??LedQStaUpdate_1:
   \   0000004A   0xBC10             POP      {R4}
   \   0000004C   0x4770             BX       LR               ;; return
     89          

   \                                 In section .text, align 2, keep-with-next
     90          static void LED_UpdateSta(INT8U id)
     91          {
   \                     LED_UpdateSta:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0001             MOVS     R1,R0
     92            INT16U TimTemp = LEDQueue[id].Tim % LEDQueue[id].CtlData[LEDQueue[id].Queue_Head].Tim_OnOff;
   \   00000004   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0x203C             MOVS     R0,#+60
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable8_6
   \   0000000C   0xFB00 0x2001      MLA      R0,R0,R1,R2
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x223C             MOVS     R2,#+60
   \   00000016   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   0000001A   0xFB02 0x3201      MLA      R2,R2,R1,R3
   \   0000001E   0xF892 0x2032      LDRB     R2,[R2, #+50]
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0x233C             MOVS     R3,#+60
   \   00000026   0x.... 0x....      LDR.W    R4,??DataTable8_6
   \   0000002A   0xFB03 0x4301      MLA      R3,R3,R1,R4
   \   0000002E   0xEB13 0x02C2      ADDS     R2,R3,R2, LSL #+3
   \   00000032   0x7912             LDRB     R2,[R2, #+4]
   \   00000034   0xFB90 0xF3F2      SDIV     R3,R0,R2
   \   00000038   0xFB02 0x0013      MLS      R0,R2,R3,R0
     93             
     94            if(TimTemp < LEDQueue[id].CtlData[LEDQueue[id].Queue_Head].Tim_On1 + LEDQueue[id].CtlData[LEDQueue[id].Queue_Head].Tim_Off1)
   \   0000003C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000040   0x223C             MOVS     R2,#+60
   \   00000042   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   00000046   0xFB02 0x3201      MLA      R2,R2,R1,R3
   \   0000004A   0xF892 0x2032      LDRB     R2,[R2, #+50]
   \   0000004E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000050   0x233C             MOVS     R3,#+60
   \   00000052   0x.... 0x....      LDR.W    R4,??DataTable8_6
   \   00000056   0xFB03 0x4301      MLA      R3,R3,R1,R4
   \   0000005A   0xEB13 0x02C2      ADDS     R2,R3,R2, LSL #+3
   \   0000005E   0x7952             LDRB     R2,[R2, #+5]
   \   00000060   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000062   0x233C             MOVS     R3,#+60
   \   00000064   0x.... 0x....      LDR.W    R4,??DataTable8_6
   \   00000068   0xFB03 0x4301      MLA      R3,R3,R1,R4
   \   0000006C   0xF893 0x3032      LDRB     R3,[R3, #+50]
   \   00000070   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000072   0x243C             MOVS     R4,#+60
   \   00000074   0x.... 0x....      LDR.W    R5,??DataTable8_6
   \   00000078   0xFB04 0x5401      MLA      R4,R4,R1,R5
   \   0000007C   0xEB14 0x03C3      ADDS     R3,R4,R3, LSL #+3
   \   00000080   0x799B             LDRB     R3,[R3, #+6]
   \   00000082   0xFA53 0xF282      UXTAB    R2,R3,R2
   \   00000086   0x4290             CMP      R0,R2
   \   00000088   0xDA46             BGE.N    ??LED_UpdateSta_0
     95            {
     96              if(0 == TimTemp)
   \   0000008A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD126             BNE.N    ??LED_UpdateSta_1
     97              {
     98                if(0 != LEDQueue[id].CtlData[LEDQueue[id].Queue_Head].Tim_On1)
   \   00000090   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000092   0x203C             MOVS     R0,#+60
   \   00000094   0x.... 0x....      LDR.W    R2,??DataTable8_6
   \   00000098   0xFB00 0x2001      MLA      R0,R0,R1,R2
   \   0000009C   0xF890 0x0032      LDRB     R0,[R0, #+50]
   \   000000A0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000A2   0x223C             MOVS     R2,#+60
   \   000000A4   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   000000A8   0xFB02 0x3201      MLA      R2,R2,R1,R3
   \   000000AC   0xEB12 0x00C0      ADDS     R0,R2,R0, LSL #+3
   \   000000B0   0x7940             LDRB     R0,[R0, #+5]
   \   000000B2   0x2800             CMP      R0,#+0
   \   000000B4   0xD009             BEQ.N    ??LED_UpdateSta_2
     99                {
    100                  LEDQueue[id].setLED(LED_ON);
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000BA   0x223C             MOVS     R2,#+60
   \   000000BC   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   000000C0   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   000000C4   0x6B89             LDR      R1,[R1, #+56]
   \   000000C6   0x4788             BLX      R1
   \   000000C8   0xE09F             B.N      ??LED_UpdateSta_3
    101                }
    102                else
    103                {
    104                  LEDQueue[id].setLED(LED_OFF);
   \                     ??LED_UpdateSta_2:
   \   000000CA   0x2001             MOVS     R0,#+1
   \   000000CC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000CE   0x223C             MOVS     R2,#+60
   \   000000D0   0x.... 0x....      LDR.W    R3,??DataTable8_6
   \   000000D4   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   000000D8   0x6B89             LDR      R1,[R1, #+56]
   \   000000DA   0x4788             BLX      R1
   \   000000DC   0xE095             B.N      ??LED_UpdateSta_3
    105                }
    106              }
    107              else
    108              {
    109                if(TimTemp == LEDQueue[id].CtlData[LEDQueue[id].Queue_Head].Tim_On1)
   \                     ??LED_UpdateSta_1:
   \   000000DE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000E0   0x223C             MOVS     R2,#+60
   \   000000E2   0x....             LDR.N    R3,??DataTable8_6
   \   000000E4   0xFB02 0x3201      MLA      R2,R2,R1,R3
   \   000000E8   0xF892 0x2032      LDRB     R2,[R2, #+50]
   \   000000EC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000EE   0x233C             MOVS     R3,#+60
   \   000000F0   0x....             LDR.N    R4,??DataTable8_6
   \   000000F2   0xFB03 0x4301      MLA      R3,R3,R1,R4
   \   000000F6   0xEB13 0x02C2      ADDS     R2,R3,R2, LSL #+3
   \   000000FA   0x7952             LDRB     R2,[R2, #+5]
   \   000000FC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000FE   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000100   0x4290             CMP      R0,R2
   \   00000102   0xF040 0x8082      BNE.W    ??LED_UpdateSta_3
    110                {
    111                  LEDQueue[id].setLED(LED_OFF);
   \   00000106   0x2001             MOVS     R0,#+1
   \   00000108   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000010A   0x223C             MOVS     R2,#+60
   \   0000010C   0x....             LDR.N    R3,??DataTable8_6
   \   0000010E   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   00000112   0x6B89             LDR      R1,[R1, #+56]
   \   00000114   0x4788             BLX      R1
   \   00000116   0xE078             B.N      ??LED_UpdateSta_3
    112                }
    113              }
    114            }
    115            else
    116            {
    117              if(LEDQueue[id].CtlData[LEDQueue[id].Queue_Head].Tim_On1 + LEDQueue[id].CtlData[LEDQueue[id].Queue_Head].Tim_Off1 == TimTemp)
   \                     ??LED_UpdateSta_0:
   \   00000118   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000011A   0x223C             MOVS     R2,#+60
   \   0000011C   0x....             LDR.N    R3,??DataTable8_6
   \   0000011E   0xFB02 0x3201      MLA      R2,R2,R1,R3
   \   00000122   0xF892 0x2032      LDRB     R2,[R2, #+50]
   \   00000126   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000128   0x233C             MOVS     R3,#+60
   \   0000012A   0x....             LDR.N    R4,??DataTable8_6
   \   0000012C   0xFB03 0x4301      MLA      R3,R3,R1,R4
   \   00000130   0xEB13 0x02C2      ADDS     R2,R3,R2, LSL #+3
   \   00000134   0x7952             LDRB     R2,[R2, #+5]
   \   00000136   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000138   0x233C             MOVS     R3,#+60
   \   0000013A   0x....             LDR.N    R4,??DataTable8_6
   \   0000013C   0xFB03 0x4301      MLA      R3,R3,R1,R4
   \   00000140   0xF893 0x3032      LDRB     R3,[R3, #+50]
   \   00000144   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000146   0x243C             MOVS     R4,#+60
   \   00000148   0x....             LDR.N    R5,??DataTable8_6
   \   0000014A   0xFB04 0x5401      MLA      R4,R4,R1,R5
   \   0000014E   0xEB14 0x03C3      ADDS     R3,R4,R3, LSL #+3
   \   00000152   0x799B             LDRB     R3,[R3, #+6]
   \   00000154   0xFA53 0xF282      UXTAB    R2,R3,R2
   \   00000158   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000015A   0x4282             CMP      R2,R0
   \   0000015C   0xD119             BNE.N    ??LED_UpdateSta_4
    118              {
    119                if(0 != LEDQueue[id].CtlData[LEDQueue[id].Queue_Head].Tim_On2)
   \   0000015E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000160   0x203C             MOVS     R0,#+60
   \   00000162   0x....             LDR.N    R2,??DataTable8_6
   \   00000164   0xFB00 0x2001      MLA      R0,R0,R1,R2
   \   00000168   0xF890 0x0032      LDRB     R0,[R0, #+50]
   \   0000016C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000016E   0x223C             MOVS     R2,#+60
   \   00000170   0x....             LDR.N    R3,??DataTable8_6
   \   00000172   0xFB02 0x3201      MLA      R2,R2,R1,R3
   \   00000176   0xEB12 0x00C0      ADDS     R0,R2,R0, LSL #+3
   \   0000017A   0x79C0             LDRB     R0,[R0, #+7]
   \   0000017C   0x2800             CMP      R0,#+0
   \   0000017E   0xD044             BEQ.N    ??LED_UpdateSta_3
    120                {
    121                  LEDQueue[id].setLED(LED_ON);
   \   00000180   0x2000             MOVS     R0,#+0
   \   00000182   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000184   0x223C             MOVS     R2,#+60
   \   00000186   0x....             LDR.N    R3,??DataTable8_6
   \   00000188   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   0000018C   0x6B89             LDR      R1,[R1, #+56]
   \   0000018E   0x4788             BLX      R1
   \   00000190   0xE03B             B.N      ??LED_UpdateSta_3
    122                }
    123              }
    124              else
    125              {
    126                if(LEDQueue[id].CtlData[LEDQueue[id].Queue_Head].Tim_On1 + LEDQueue[id].CtlData[LEDQueue[id].Queue_Head].Tim_Off1 + LEDQueue[id].CtlData[LEDQueue[id].Queue_Head].Tim_On2 == TimTemp)
   \                     ??LED_UpdateSta_4:
   \   00000192   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000194   0x223C             MOVS     R2,#+60
   \   00000196   0x....             LDR.N    R3,??DataTable8_6
   \   00000198   0xFB02 0x3201      MLA      R2,R2,R1,R3
   \   0000019C   0xF892 0x2032      LDRB     R2,[R2, #+50]
   \   000001A0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001A2   0x233C             MOVS     R3,#+60
   \   000001A4   0x....             LDR.N    R4,??DataTable8_6
   \   000001A6   0xFB03 0x4301      MLA      R3,R3,R1,R4
   \   000001AA   0xEB13 0x02C2      ADDS     R2,R3,R2, LSL #+3
   \   000001AE   0x7952             LDRB     R2,[R2, #+5]
   \   000001B0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001B2   0x233C             MOVS     R3,#+60
   \   000001B4   0x....             LDR.N    R4,??DataTable8_6
   \   000001B6   0xFB03 0x4301      MLA      R3,R3,R1,R4
   \   000001BA   0xF893 0x3032      LDRB     R3,[R3, #+50]
   \   000001BE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001C0   0x243C             MOVS     R4,#+60
   \   000001C2   0x....             LDR.N    R5,??DataTable8_6
   \   000001C4   0xFB04 0x5401      MLA      R4,R4,R1,R5
   \   000001C8   0xEB14 0x03C3      ADDS     R3,R4,R3, LSL #+3
   \   000001CC   0x799B             LDRB     R3,[R3, #+6]
   \   000001CE   0xFA53 0xF282      UXTAB    R2,R3,R2
   \   000001D2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001D4   0x233C             MOVS     R3,#+60
   \   000001D6   0x....             LDR.N    R4,??DataTable8_6
   \   000001D8   0xFB03 0x4301      MLA      R3,R3,R1,R4
   \   000001DC   0xF893 0x3032      LDRB     R3,[R3, #+50]
   \   000001E0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001E2   0x243C             MOVS     R4,#+60
   \   000001E4   0x....             LDR.N    R5,??DataTable8_6
   \   000001E6   0xFB04 0x5401      MLA      R4,R4,R1,R5
   \   000001EA   0xEB14 0x03C3      ADDS     R3,R4,R3, LSL #+3
   \   000001EE   0x79DB             LDRB     R3,[R3, #+7]
   \   000001F0   0xFA52 0xF283      UXTAB    R2,R2,R3
   \   000001F4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001F6   0x4282             CMP      R2,R0
   \   000001F8   0xD107             BNE.N    ??LED_UpdateSta_3
    127                {
    128                  LEDQueue[id].setLED(LED_OFF);
   \   000001FA   0x2001             MOVS     R0,#+1
   \   000001FC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001FE   0x223C             MOVS     R2,#+60
   \   00000200   0x....             LDR.N    R3,??DataTable8_6
   \   00000202   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   00000206   0x6B89             LDR      R1,[R1, #+56]
   \   00000208   0x4788             BLX      R1
    129                }
    130              }
    131            }
    132          }
   \                     ??LED_UpdateSta_3:
   \   0000020A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    133          
    134          #endif
    135          

   \                                 In section .text, align 2, keep-with-next
    136          void LED_Init(void)
    137          {
   \                     LED_Init:
   \   00000000   0xB580             PUSH     {R7,LR}
    138          #if EN_LED != 0
    139            LED_IOInit();
   \   00000002   0x.... 0x....      BL       LED_IOInit
    140            setGreenLED(LED_OFF);
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       setGreenLED
    141            setRedLED(LED_OFF);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       setRedLED
    142            setWhiteLED(LED_OFF);
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       setWhiteLED
    143            LED_QueueInit();
   \   00000018   0x.... 0x....      BL       LED_QueueInit
    144          #else
    145            return;
    146          #endif
    147          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
    148          

   \                                 In section .text, align 2, keep-with-next
    149          INT8U LedCtlSet(LEDColor id,
    150                          INT16U tim_all,
    151                          INT8U tim_on1,
    152                          INT8U tim_off1,
    153                          INT8U tim_on2,
    154                          INT8U tim_off2
    155                         )
    156          {
   \                     LedCtlSet:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x9C06             LDR      R4,[SP, #+24]
   \   00000004   0x9D07             LDR      R5,[SP, #+28]
    157          #if EN_LED != 0
    158            if(Full != LEDQueue[id].Queue_Stat)//¶ÓÁÐÎ´Âú
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x263C             MOVS     R6,#+60
   \   0000000A   0x....             LDR.N    R7,??DataTable8_6
   \   0000000C   0xFB06 0x7600      MLA      R6,R6,R0,R7
   \   00000010   0xF896 0x6034      LDRB     R6,[R6, #+52]
   \   00000014   0x2E00             CMP      R6,#+0
   \   00000016   0xF000 0x808D      BEQ.W    ??LedCtlSet_0
    159            {
    160              LEDQueue[id].Tim = 0;
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x263C             MOVS     R6,#+60
   \   0000001E   0x....             LDR.N    R7,??DataTable8_6
   \   00000020   0xFB06 0x7600      MLA      R6,R6,R0,R7
   \   00000024   0x2700             MOVS     R7,#+0
   \   00000026   0x8037             STRH     R7,[R6, #+0]
    161              LEDQueue[id].CtlData[LEDQueue[id].Queue_Rear].Tim_All = tim_all;
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x263C             MOVS     R6,#+60
   \   0000002C   0x....             LDR.N    R7,??DataTable8_6
   \   0000002E   0xFB06 0x7600      MLA      R6,R6,R0,R7
   \   00000032   0xF896 0x6033      LDRB     R6,[R6, #+51]
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x273C             MOVS     R7,#+60
   \   0000003A   0x.... 0x....      LDR.W    R12,??DataTable8_6
   \   0000003E   0xFB07 0xC700      MLA      R7,R7,R0,R12
   \   00000042   0xEB17 0x06C6      ADDS     R6,R7,R6, LSL #+3
   \   00000046   0x8071             STRH     R1,[R6, #+2]
    162              LEDQueue[id].CtlData[LEDQueue[id].Queue_Rear].Tim_On1 = tim_on1;
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0x213C             MOVS     R1,#+60
   \   0000004C   0x....             LDR.N    R6,??DataTable8_6
   \   0000004E   0xFB01 0x6100      MLA      R1,R1,R0,R6
   \   00000052   0xF891 0x1033      LDRB     R1,[R1, #+51]
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0x263C             MOVS     R6,#+60
   \   0000005A   0x....             LDR.N    R7,??DataTable8_6
   \   0000005C   0xFB06 0x7600      MLA      R6,R6,R0,R7
   \   00000060   0xEB16 0x01C1      ADDS     R1,R6,R1, LSL #+3
   \   00000064   0x714A             STRB     R2,[R1, #+5]
    163              LEDQueue[id].CtlData[LEDQueue[id].Queue_Rear].Tim_Off1 = tim_off1;
   \   00000066   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   0x213C             MOVS     R1,#+60
   \   0000006A   0x....             LDR.N    R6,??DataTable8_6
   \   0000006C   0xFB01 0x6100      MLA      R1,R1,R0,R6
   \   00000070   0xF891 0x1033      LDRB     R1,[R1, #+51]
   \   00000074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   0x263C             MOVS     R6,#+60
   \   00000078   0x....             LDR.N    R7,??DataTable8_6
   \   0000007A   0xFB06 0x7600      MLA      R6,R6,R0,R7
   \   0000007E   0xEB16 0x01C1      ADDS     R1,R6,R1, LSL #+3
   \   00000082   0x718B             STRB     R3,[R1, #+6]
    164              LEDQueue[id].CtlData[LEDQueue[id].Queue_Rear].Tim_On2 = tim_on2;
   \   00000084   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000086   0x213C             MOVS     R1,#+60
   \   00000088   0x....             LDR.N    R6,??DataTable8_6
   \   0000008A   0xFB01 0x6100      MLA      R1,R1,R0,R6
   \   0000008E   0xF891 0x1033      LDRB     R1,[R1, #+51]
   \   00000092   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000094   0x263C             MOVS     R6,#+60
   \   00000096   0x....             LDR.N    R7,??DataTable8_6
   \   00000098   0xFB06 0x7600      MLA      R6,R6,R0,R7
   \   0000009C   0xEB16 0x01C1      ADDS     R1,R6,R1, LSL #+3
   \   000000A0   0x71CC             STRB     R4,[R1, #+7]
    165              LEDQueue[id].CtlData[LEDQueue[id].Queue_Rear].Tim_Off2 = tim_off2;
   \   000000A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A4   0x213C             MOVS     R1,#+60
   \   000000A6   0x....             LDR.N    R6,??DataTable8_6
   \   000000A8   0xFB01 0x6100      MLA      R1,R1,R0,R6
   \   000000AC   0xF891 0x1033      LDRB     R1,[R1, #+51]
   \   000000B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B2   0x263C             MOVS     R6,#+60
   \   000000B4   0x....             LDR.N    R7,??DataTable8_6
   \   000000B6   0xFB06 0x7600      MLA      R6,R6,R0,R7
   \   000000BA   0xEB16 0x01C1      ADDS     R1,R6,R1, LSL #+3
   \   000000BE   0x720D             STRB     R5,[R1, #+8]
    166              LEDQueue[id].CtlData[LEDQueue[id].Queue_Rear].Tim_OnOff = tim_on1 + tim_off1 + tim_on2 + tim_off2;
   \   000000C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C2   0x213C             MOVS     R1,#+60
   \   000000C4   0x....             LDR.N    R6,??DataTable8_6
   \   000000C6   0xFB01 0x6100      MLA      R1,R1,R0,R6
   \   000000CA   0xF891 0x1033      LDRB     R1,[R1, #+51]
   \   000000CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D0   0x263C             MOVS     R6,#+60
   \   000000D2   0x....             LDR.N    R7,??DataTable8_6
   \   000000D4   0xFB06 0x7600      MLA      R6,R6,R0,R7
   \   000000D8   0xEB16 0x01C1      ADDS     R1,R6,R1, LSL #+3
   \   000000DC   0x189A             ADDS     R2,R3,R2
   \   000000DE   0x18A2             ADDS     R2,R4,R2
   \   000000E0   0x18AA             ADDS     R2,R5,R2
   \   000000E2   0x710A             STRB     R2,[R1, #+4]
    167              LED_EnQueue(id);//Èë¶Ó
   \   000000E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E6   0x213C             MOVS     R1,#+60
   \   000000E8   0x....             LDR.N    R2,??DataTable8_6
   \   000000EA   0xFB01 0x2100      MLA      R1,R1,R0,R2
   \   000000EE   0xF891 0x1033      LDRB     R1,[R1, #+51]
   \   000000F2   0x1C49             ADDS     R1,R1,#+1
   \   000000F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F6   0x223C             MOVS     R2,#+60
   \   000000F8   0x....             LDR.N    R3,??DataTable8_6
   \   000000FA   0xFB02 0x3200      MLA      R2,R2,R0,R3
   \   000000FE   0xF882 0x1033      STRB     R1,[R2, #+51]
   \   00000102   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000104   0x213C             MOVS     R1,#+60
   \   00000106   0x....             LDR.N    R2,??DataTable8_6
   \   00000108   0xFB01 0x2100      MLA      R1,R1,R0,R2
   \   0000010C   0xF891 0x1033      LDRB     R1,[R1, #+51]
   \   00000110   0x2206             MOVS     R2,#+6
   \   00000112   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \   00000116   0xFB02 0x1113      MLS      R1,R2,R3,R1
   \   0000011A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011C   0x223C             MOVS     R2,#+60
   \   0000011E   0x....             LDR.N    R3,??DataTable8_6
   \   00000120   0xFB02 0x3200      MLA      R2,R2,R0,R3
   \   00000124   0xF882 0x1033      STRB     R1,[R2, #+51]
    168              LedQStaUpdate(id,Full);//¸üÐÂ¶ÓÁÐ×´Ì¬
   \   00000128   0x2100             MOVS     R1,#+0
   \   0000012A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000012C   0x.... 0x....      BL       LedQStaUpdate
    169              return KOS_OK;
   \   00000130   0x2000             MOVS     R0,#+0
   \   00000132   0xE000             B.N      ??LedCtlSet_1
    170            }
    171            else
    172            {
    173              return KOS_ERR;
   \                     ??LedCtlSet_0:
   \   00000134   0x2001             MOVS     R0,#+1
   \                     ??LedCtlSet_1:
   \   00000136   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    174            }
    175          #else
    176            return KOS_OK;
    177          #endif
    178          }
    179          

   \                                 In section .text, align 2, keep-with-next
    180          void LED_CtlProc(void)
    181          {
   \                     LED_CtlProc:
   \   00000000   0xB510             PUSH     {R4,LR}
    182          #if EN_LED != 0
    183            for(INT8U index = LEDColorStart;index < LEDColorEnd;++index)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE011             B.N      ??LED_CtlProc_0
    184            {
    185              if(Empty != LEDQueue[index].Queue_Stat)
    186              {
    187                if(LEDQueue[index].CtlData[LEDQueue[index].Queue_Head].Tim_All == LEDQueue[index].Tim)
    188                {
    189                  LEDQueue[index].Tim = 0;
    190                  LED_DeQueue(index);//³ö¶Ó
    191                  LedQStaUpdate(index,Empty);//¸üÐÂ¶ÓÁÐ×´Ì¬
    192                  LED_UpdateSta(index);
    193                }
    194                else
    195                {   
    196                  LED_UpdateSta(index);
   \                     ??LED_CtlProc_1:
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       LED_UpdateSta
    197                  LEDQueue[index].Tim++;
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x203C             MOVS     R0,#+60
   \   00000012   0x....             LDR.N    R1,??DataTable8_6
   \   00000014   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000018   0x8800             LDRH     R0,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x213C             MOVS     R1,#+60
   \   00000020   0x....             LDR.N    R2,??DataTable8_6
   \   00000022   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   00000026   0x8008             STRH     R0,[R1, #+0]
    198                }
   \                     ??LED_CtlProc_2:
   \   00000028   0x1C64             ADDS     R4,R4,#+1
   \                     ??LED_CtlProc_0:
   \   0000002A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002C   0x2C03             CMP      R4,#+3
   \   0000002E   0xD252             BCS.N    ??LED_CtlProc_3
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0x203C             MOVS     R0,#+60
   \   00000034   0x....             LDR.N    R1,??DataTable8_6
   \   00000036   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   0000003A   0xF890 0x0034      LDRB     R0,[R0, #+52]
   \   0000003E   0x2802             CMP      R0,#+2
   \   00000040   0xD0F2             BEQ.N    ??LED_CtlProc_2
   \   00000042   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000044   0x203C             MOVS     R0,#+60
   \   00000046   0x....             LDR.N    R1,??DataTable8_6
   \   00000048   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   0000004C   0xF890 0x0032      LDRB     R0,[R0, #+50]
   \   00000050   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000052   0x213C             MOVS     R1,#+60
   \   00000054   0x....             LDR.N    R2,??DataTable8_6
   \   00000056   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   0000005A   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   0000005E   0x8840             LDRH     R0,[R0, #+2]
   \   00000060   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000062   0x213C             MOVS     R1,#+60
   \   00000064   0x....             LDR.N    R2,??DataTable8_6
   \   00000066   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   0000006A   0x8809             LDRH     R1,[R1, #+0]
   \   0000006C   0x4288             CMP      R0,R1
   \   0000006E   0xD1CA             BNE.N    ??LED_CtlProc_1
   \   00000070   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000072   0x203C             MOVS     R0,#+60
   \   00000074   0x....             LDR.N    R1,??DataTable8_6
   \   00000076   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x8001             STRH     R1,[R0, #+0]
   \   0000007E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000080   0x203C             MOVS     R0,#+60
   \   00000082   0x....             LDR.N    R1,??DataTable8_6
   \   00000084   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000088   0xF890 0x0032      LDRB     R0,[R0, #+50]
   \   0000008C   0x1C40             ADDS     R0,R0,#+1
   \   0000008E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000090   0x213C             MOVS     R1,#+60
   \   00000092   0x....             LDR.N    R2,??DataTable8_6
   \   00000094   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   00000098   0xF881 0x0032      STRB     R0,[R1, #+50]
   \   0000009C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009E   0x203C             MOVS     R0,#+60
   \   000000A0   0x....             LDR.N    R1,??DataTable8_6
   \   000000A2   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   000000A6   0xF890 0x0032      LDRB     R0,[R0, #+50]
   \   000000AA   0x2106             MOVS     R1,#+6
   \   000000AC   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000B0   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   000000B4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B6   0x213C             MOVS     R1,#+60
   \   000000B8   0x....             LDR.N    R2,??DataTable8_6
   \   000000BA   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   000000BE   0xF881 0x0032      STRB     R0,[R1, #+50]
   \   000000C2   0x2102             MOVS     R1,#+2
   \   000000C4   0x0020             MOVS     R0,R4
   \   000000C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C8   0x.... 0x....      BL       LedQStaUpdate
   \   000000CC   0x0020             MOVS     R0,R4
   \   000000CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D0   0x.... 0x....      BL       LED_UpdateSta
   \   000000D4   0xE7A8             B.N      ??LED_CtlProc_2
    199              }
    200            }
    201          #else
    202          
    203          #endif
    204          }
   \                     ??LED_CtlProc_3:
   \   000000D6   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x400FF088         DC32     0x400ff088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x400FF084         DC32     0x400ff084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x4004B01C         DC32     0x4004b01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x400FF094         DC32     0x400ff094

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x4004B024         DC32     0x4004b024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x4004B02C         DC32     0x4004b02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     LEDQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     setGreenLED

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     setRedLED

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     setWhiteLED

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  LED_CtlProc
              8 -> LED_UpdateSta
              8 -> LedQStaUpdate
        0  LED_IOInit
        8  LED_Init
              8 -> LED_IOInit
              8 -> LED_QueueInit
              8 -> setGreenLED
              8 -> setRedLED
              8 -> setWhiteLED
        0  LED_QueueInit
       16  LED_UpdateSta
             16 -- Indirect call
       24  LedCtlSet
             24 -> LedQStaUpdate
        4  LedQStaUpdate
        0  setGreenLED
        0  setRedLED
        0  setWhiteLED


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
     180  LEDQueue
     216  LED_CtlProc
      82  LED_IOInit
      30  LED_Init
     116  LED_QueueInit
     524  LED_UpdateSta
     312  LedCtlSet
      78  LedQStaUpdate
      42  setGreenLED
      46  setRedLED
      42  setWhiteLED

 
   180 bytes in section .bss
 1 528 bytes in section .text
 
 1 528 bytes of CODE memory
   180 bytes of DATA memory

Errors: none
Warnings: none

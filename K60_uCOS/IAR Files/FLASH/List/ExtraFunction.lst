###############################################################################
#                                                                             #
#                                                       03/Nov/2015  20:45:49 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\WangChangan\Desktop\K10小板定稿\ExtraFunction\E #
#                    xtraFunction.c                                           #
#    Command line =  C:\Users\WangChangan\Desktop\K10小板定稿\ExtraFunction\E #
#                    xtraFunction.c -D COMPILER_IAR -lCN                      #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\FLASH\List\" -lB "C:\Users\WangChangan\Desktop\K10 #
#                    小板定稿\IAR Files\FLASH\List\" -o                       #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\FLASH\Obj\" --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Project_Headers\" -I                            #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\KinetisDrivers\" -I                             #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\ExtraFunction\" -I                              #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Hardware_Interface\" -I                         #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Make_Decision\" -I                              #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Math\" -I "C:\Users\WangChangan\Desktop\K10小板 #
#                    定稿\IAR Files\..\Original_Process\" -I                  #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Platform\" -I "C:\Users\WangChangan\Desktop\K10 #
#                    小板定稿\IAR Files\..\SD_System\" -I                     #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Source\" -I "C:\Users\WangChangan\Desktop\K10小 #
#                    板定稿\IAR Files\..\System_Init\" -Ol                    #
#    List file    =  C:\Users\WangChangan\Desktop\K10小板定稿\IAR             #
#                    Files\FLASH\List\ExtraFunction.lst                       #
#    Object file  =  C:\Users\WangChangan\Desktop\K10小板定稿\IAR             #
#                    Files\FLASH\Obj\ExtraFunction.o                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\WangChangan\Desktop\K10小板定稿\ExtraFunction\ExtraFunction.c
      1          #include "./ExtraFunction.h"
      2          #include "../HardwareInterface/HardwareOperation.h"
      3          #include "../ZLG7290/ZLG7290.h"
      4          #include "../LEDCtl/LEDCtl_Ext.h"
      5          #include "../OLED/OLED.h"
      6          #include "../SD_System/SD_System.h"
      7          
      8          /**************************内部变量定义**************************/
      9          #if EN_Buzzer != 0
     10          

   \                                 In section .bss, align 2
     11          static INT16U Tim_Buzzer;                  /*蜂鸣器时间变量*/
   \                     Tim_Buzzer:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     12          static BuzzerData_t BuzzerQ[NUM_BuzzerQ];  /*蜂鸣器缓冲队列*/
   \                     BuzzerQ:
   \   00000000                      DS8 48

   \                                 In section .bss, align 1
     13          static INT8U BuzzerQ_Head,BuzzerQ_Rear;    /*蜂鸣器缓冲队列的头尾指针*/
   \                     BuzzerQ_Head:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     BuzzerQ_Rear:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     14          static INT8U BuzzerQ_Stat;                 /*蜂鸣器缓冲队列状态,=0表示队满*/
   \                     BuzzerQ_Stat:
   \   00000000                      DS8 1
     15          
     16          #endif
     17          
     18          /**************************内部函数定义**************************/
     19          #if EN_SDCard != 0 
     20          
     21          /*如果SD卡读写中使用了双缓存并使能了统计功能,则将统计结果写入SD卡*/
     22          #ifdef EN_SDbuf  
     23          #ifdef EN_Cnt_SDbuf
     24          /************************************************************************************************ 
     25          * WriteVar_SD
     26          * 将16位无符号数据按ASCII码的形式写入SD卡
     27          * 输入参数  dat:代写入数据
     28          ************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     29          static void WriteVar_SD(INT16U dat)
     30          {
   \                     WriteVar_SD:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     31            INT16U div=10000,flag=0,tmp;
   \   00000004   0xF242 0x7510      MOVW     R5,#+10000
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xE017             B.N      ??WriteVar_SD_0
     32            for(;div!=0 ;div/=10)
     33            {
     34              tmp=(dat/div)%10;
   \                     ??WriteVar_SD_1:
   \   0000000C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000010   0xFB94 0xF0F5      SDIV     R0,R4,R5
   \   00000014   0x210A             MOVS     R1,#+10
   \   00000016   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000001A   0xFB01 0x0012      MLS      R0,R1,R2,R0
     35              if(tmp!=0) flag=1;
   \   0000001E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD000             BEQ.N    ??WriteVar_SD_2
   \   00000024   0x2601             MOVS     R6,#+1
     36              if(flag)
   \                     ??WriteVar_SD_2:
   \   00000026   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000028   0x2E00             CMP      R6,#+0
   \   0000002A   0xD003             BEQ.N    ??WriteVar_SD_3
     37              {
     38                writebyte_ram('0'+ tmp);
   \   0000002C   0x3030             ADDS     R0,R0,#+48
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x.... 0x....      BL       writebyte_ram
     39              }
     40            }
   \                     ??WriteVar_SD_3:
   \   00000034   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000036   0x200A             MOVS     R0,#+10
   \   00000038   0xFB95 0xF5F0      SDIV     R5,R5,R0
   \                     ??WriteVar_SD_0:
   \   0000003C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000003E   0x2D00             CMP      R5,#+0
   \   00000040   0xD1E4             BNE.N    ??WriteVar_SD_1
     41            
     42            if(flag == 0) writebyte_ram('0'); 
   \   00000042   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000044   0x2E00             CMP      R6,#+0
   \   00000046   0xD102             BNE.N    ??WriteVar_SD_4
   \   00000048   0x2030             MOVS     R0,#+48
   \   0000004A   0x.... 0x....      BL       writebyte_ram
     43          }
   \                     ??WriteVar_SD_4:
   \   0000004E   0xBD70             POP      {R4-R6,PC}       ;; return
     44          /************************************************************************************************ 
     45          * BufTest_SD
     46          * 将SD卡双缓存的使用情况添加到文件的末尾
     47          ************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     48          static void BufTest_SD()
     49          {
   \                     BufTest_SD:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     50            INT16U s1,s2,s3,s4,s5;
     51            
     52            writebyte_ram('\r');
   \   00000002   0x200D             MOVS     R0,#+13
   \   00000004   0x.... 0x....      BL       writebyte_ram
     53            writebyte_ram('\n');
   \   00000008   0x200A             MOVS     R0,#+10
   \   0000000A   0x.... 0x....      BL       writebyte_ram
     54            
     55            s1=Cnt_SDbufS1;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable6
   \   00000012   0x8800             LDRH     R0,[R0, #+0]
     56            s2=Cnt_SDbufS2;
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable6_1
   \   00000018   0x880C             LDRH     R4,[R1, #+0]
     57            s3=Cnt_SDbufS3;
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable6_2
   \   0000001E   0x880D             LDRH     R5,[R1, #+0]
     58            s4=Cnt_SDbufS4;
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable6_3
   \   00000024   0x880E             LDRH     R6,[R1, #+0]
     59            s5=Cnt_SDbufS5;
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable6_4
   \   0000002A   0x880F             LDRH     R7,[R1, #+0]
     60            
     61            WriteVar_SD(s1);
   \   0000002C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002E   0x.... 0x....      BL       WriteVar_SD
     62            writebyte_ram(',');
   \   00000032   0x202C             MOVS     R0,#+44
   \   00000034   0x.... 0x....      BL       writebyte_ram
     63            WriteVar_SD(s2);
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003C   0x.... 0x....      BL       WriteVar_SD
     64            writebyte_ram(',');
   \   00000040   0x202C             MOVS     R0,#+44
   \   00000042   0x.... 0x....      BL       writebyte_ram
     65            WriteVar_SD(s3);
   \   00000046   0x0028             MOVS     R0,R5
   \   00000048   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004A   0x.... 0x....      BL       WriteVar_SD
     66            writebyte_ram(','); 
   \   0000004E   0x202C             MOVS     R0,#+44
   \   00000050   0x.... 0x....      BL       writebyte_ram
     67            WriteVar_SD(s4);
   \   00000054   0x0030             MOVS     R0,R6
   \   00000056   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000058   0x.... 0x....      BL       WriteVar_SD
     68            writebyte_ram(','); 
   \   0000005C   0x202C             MOVS     R0,#+44
   \   0000005E   0x.... 0x....      BL       writebyte_ram
     69            WriteVar_SD(s5);
   \   00000062   0x0038             MOVS     R0,R7
   \   00000064   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000066   0x.... 0x....      BL       WriteVar_SD
     70          }
   \   0000006A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     71          #endif
     72          #endif
     73          
     74          /************************************************************************************************ 
     75          * Write_SD
     76          * 将数据按照特定格式存入SD卡
     77          ************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     78          static void Write_SD(void)
     79          {
   \                     Write_SD:
   \   00000000   0xB580             PUSH     {R7,LR}
     80            static INT16U cnt = 0;
     81            
     82            writebyte_ram( (byte) 0 );
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       writebyte_ram
     83            
     84            if(SD_Packet == cnt)   
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable6_5
   \   0000000C   0x8800             LDRH     R0,[R0, #+0]
   \   0000000E   0x2864             CMP      R0,#+100
   \   00000010   0xD115             BNE.N    ??Write_SD_0
     85            { // 将图像帧数写入SD卡(注意是实际写入SD卡里的帧数,而不是执行控制策略的场数)
     86          
     87              writebyte_ram( (byte)(cnt%256) );         
   \   00000012   0x....             LDR.N    R0,??DataTable6_5
   \   00000014   0x8801             LDRH     R1,[R0, #+0]
   \   00000016   0xF44F 0x7280      MOV      R2,#+256
   \   0000001A   0xFB91 0xF0F2      SDIV     R0,R1,R2
   \   0000001E   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x.... 0x....      BL       writebyte_ram
     88              writebyte_ram( (byte)(cnt>>8) );
   \   00000028   0x....             LDR.N    R0,??DataTable6_5
   \   0000002A   0x8800             LDRH     R0,[R0, #+0]
   \   0000002C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002E   0x0A00             LSRS     R0,R0,#+8
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0x.... 0x....      BL       writebyte_ram
     89              
     90          #ifdef EN_Cnt_SDbuf        
     91              BufTest_SD();
   \   00000036   0x.... 0x....      BL       BufTest_SD
     92          #endif
     93               
     94              write_stop();
   \   0000003A   0x.... 0x....      BL       write_stop
     95            }
     96            cnt++;
   \                     ??Write_SD_0:
   \   0000003E   0x....             LDR.N    R0,??DataTable6_5
   \   00000040   0x8800             LDRH     R0,[R0, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x....             LDR.N    R1,??DataTable6_5
   \   00000046   0x8008             STRH     R0,[R1, #+0]
     97          }
   \   00000048   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 2
   \                     ??cnt:
   \   00000000                      DS8 2
     98          #endif
     99          
    100          
    101          #if EN_Buzzer != 0
    102          /************************************************************************************************ 
    103          * BuzzerCtrl_Init
    104          * 蜂鸣器控制初始化
    105          ************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    106          static void BuzzerCtrl_Init(void)
    107          {
    108            BuzzerQ_Head = 0;
   \                     BuzzerCtrl_Init:
   \   00000000   0x....             LDR.N    R0,??DataTable6_6
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7001             STRB     R1,[R0, #+0]
    109            BuzzerQ_Rear = 0;
   \   00000006   0x....             LDR.N    R0,??DataTable6_7
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x7001             STRB     R1,[R0, #+0]
    110            BuzzerQ_Stat = 1;
   \   0000000C   0x....             LDR.N    R0,??DataTable6_8
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x7001             STRB     R1,[R0, #+0]
    111            Tim_Buzzer = 0;
   \   00000012   0x....             LDR.N    R0,??DataTable6_9
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    112          }
   \   00000018   0x4770             BX       LR               ;; return
    113          /************************************************************************************************ 
    114          * Process_BuzzerCtrl
    115          * 根据蜂鸣器队列中的数据进行蜂鸣器控制
    116          ************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    117          void Process_BuzzerCtrl(void)
    118          {
   \                     Process_BuzzerCtrl:
   \   00000000   0xB4F0             PUSH     {R4-R7}
    119            BuzzerData_t *pbzr;
    120            INT8U on1,off1,on2,off2;
    121            INT16U tim;
    122            
    123            if(BuzzerQ_Rear != BuzzerQ_Head || BuzzerQ_Stat == 0)
   \   00000002   0x....             LDR.N    R0,??DataTable6_7
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable6_6
   \   00000008   0x7809             LDRB     R1,[R1, #+0]
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD103             BNE.N    ??Process_BuzzerCtrl_0
   \   0000000E   0x....             LDR.N    R0,??DataTable6_8
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD173             BNE.N    ??Process_BuzzerCtrl_1
    124            {
    125              pbzr = &BuzzerQ[BuzzerQ_Head];
   \                     ??Process_BuzzerCtrl_0:
   \   00000016   0x....             LDR.N    R0,??DataTable6_6
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x....             LDR.N    R1,??DataTable6_10
   \   0000001C   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
    126              on1 = pbzr->Tim_On1;
   \   00000020   0x7901             LDRB     R1,[R0, #+4]
    127              off1 = pbzr->Tim_Off1;
   \   00000022   0x7942             LDRB     R2,[R0, #+5]
    128              on2 = pbzr->Tim_On2;
   \   00000024   0x7983             LDRB     R3,[R0, #+6]
    129              off2 = pbzr->Tim_Off2;
   \   00000026   0x79C4             LDRB     R4,[R0, #+7]
    130              tim = Tim_Buzzer % (pbzr->Tim_Total);
   \   00000028   0x....             LDR.N    R5,??DataTable6_9
   \   0000002A   0x882D             LDRH     R5,[R5, #+0]
   \   0000002C   0x8846             LDRH     R6,[R0, #+2]
   \   0000002E   0xFB95 0xF7F6      SDIV     R7,R5,R6
   \   00000032   0xFB06 0x5517      MLS      R5,R6,R7,R5
    131              
    132              if(tim < on1 + off1)
   \   00000036   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000038   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000003A   0xFA52 0xF681      UXTAB    R6,R2,R1
   \   0000003E   0x42B5             CMP      R5,R6
   \   00000040   0xDA1F             BGE.N    ??Process_BuzzerCtrl_2
    133              {
    134                if(0 == tim)
   \   00000042   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000044   0x2D00             CMP      R5,#+0
   \   00000046   0xD110             BNE.N    ??Process_BuzzerCtrl_3
    135                {
    136                  if(0 != on1)
   \   00000048   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004A   0x2900             CMP      R1,#+0
   \   0000004C   0xD006             BEQ.N    ??Process_BuzzerCtrl_4
    137                  {
    138                    ON_Buzzer();
   \   0000004E   0x....             LDR.N    R1,??DataTable6_11  ;; 0x400ff108
   \   00000050   0x6809             LDR      R1,[R1, #+0]
   \   00000052   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \   00000056   0x....             LDR.N    R2,??DataTable6_11  ;; 0x400ff108
   \   00000058   0x6011             STR      R1,[R2, #+0]
   \   0000005A   0xE030             B.N      ??Process_BuzzerCtrl_5
    139                  }
    140                  else
    141                  {
    142                    OFF_Buzzer();
   \                     ??Process_BuzzerCtrl_4:
   \   0000005C   0x....             LDR.N    R1,??DataTable6_12  ;; 0x400ff104
   \   0000005E   0x6809             LDR      R1,[R1, #+0]
   \   00000060   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \   00000064   0x....             LDR.N    R2,??DataTable6_12  ;; 0x400ff104
   \   00000066   0x6011             STR      R1,[R2, #+0]
   \   00000068   0xE029             B.N      ??Process_BuzzerCtrl_5
    143                  }
    144                }
    145                else
    146                {
    147                  if(on1 == tim)
   \                     ??Process_BuzzerCtrl_3:
   \   0000006A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000006E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000070   0x42A9             CMP      R1,R5
   \   00000072   0xD124             BNE.N    ??Process_BuzzerCtrl_5
    148                  {
    149                    OFF_Buzzer();        
   \   00000074   0x....             LDR.N    R1,??DataTable6_12  ;; 0x400ff104
   \   00000076   0x6809             LDR      R1,[R1, #+0]
   \   00000078   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \   0000007C   0x....             LDR.N    R2,??DataTable6_12  ;; 0x400ff104
   \   0000007E   0x6011             STR      R1,[R2, #+0]
   \   00000080   0xE01D             B.N      ??Process_BuzzerCtrl_5
    150                  }
    151                }
    152              }
    153              else
    154              {
    155                if(on1 + off1 == tim)
   \                     ??Process_BuzzerCtrl_2:
   \   00000082   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000084   0xFA52 0xF481      UXTAB    R4,R2,R1
   \   00000088   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000008A   0x42AC             CMP      R4,R5
   \   0000008C   0xD109             BNE.N    ??Process_BuzzerCtrl_6
    156                {
    157                  if(0 != on2)
   \   0000008E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000090   0x2B00             CMP      R3,#+0
   \   00000092   0xD014             BEQ.N    ??Process_BuzzerCtrl_5
    158                  {
    159                    ON_Buzzer();
   \   00000094   0x....             LDR.N    R1,??DataTable6_11  ;; 0x400ff108
   \   00000096   0x6809             LDR      R1,[R1, #+0]
   \   00000098   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \   0000009C   0x....             LDR.N    R2,??DataTable6_11  ;; 0x400ff108
   \   0000009E   0x6011             STR      R1,[R2, #+0]
   \   000000A0   0xE00D             B.N      ??Process_BuzzerCtrl_5
    160                  }
    161                }
    162                else
    163                {
    164                  if(on1 + off1 + on2 == tim)
   \                     ??Process_BuzzerCtrl_6:
   \   000000A2   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000A4   0xFA52 0xF181      UXTAB    R1,R2,R1
   \   000000A8   0xFA51 0xF183      UXTAB    R1,R1,R3
   \   000000AC   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000AE   0x42A9             CMP      R1,R5
   \   000000B0   0xD105             BNE.N    ??Process_BuzzerCtrl_5
    165                  {
    166                    OFF_Buzzer();
   \   000000B2   0x....             LDR.N    R1,??DataTable6_12  ;; 0x400ff104
   \   000000B4   0x6809             LDR      R1,[R1, #+0]
   \   000000B6   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \   000000BA   0x....             LDR.N    R2,??DataTable6_12  ;; 0x400ff104
   \   000000BC   0x6011             STR      R1,[R2, #+0]
    167                  }
    168                }
    169              }
    170              
    171              if((++Tim_Buzzer) >= pbzr->Tim_All)
   \                     ??Process_BuzzerCtrl_5:
   \   000000BE   0x....             LDR.N    R1,??DataTable6_9
   \   000000C0   0x8809             LDRH     R1,[R1, #+0]
   \   000000C2   0x1C49             ADDS     R1,R1,#+1
   \   000000C4   0x....             LDR.N    R2,??DataTable6_9
   \   000000C6   0x8011             STRH     R1,[R2, #+0]
   \   000000C8   0x8800             LDRH     R0,[R0, #+0]
   \   000000CA   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000CC   0x4281             CMP      R1,R0
   \   000000CE   0xD316             BCC.N    ??Process_BuzzerCtrl_1
    172              { /*出队操作*/
    173                OFF_Buzzer();
   \   000000D0   0x....             LDR.N    R0,??DataTable6_12  ;; 0x400ff104
   \   000000D2   0x6800             LDR      R0,[R0, #+0]
   \   000000D4   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   000000D8   0x....             LDR.N    R1,??DataTable6_12  ;; 0x400ff104
   \   000000DA   0x6008             STR      R0,[R1, #+0]
    174                if((++BuzzerQ_Head) == NUM_BuzzerQ)
   \   000000DC   0x....             LDR.N    R0,??DataTable6_6
   \   000000DE   0x7800             LDRB     R0,[R0, #+0]
   \   000000E0   0x1C40             ADDS     R0,R0,#+1
   \   000000E2   0x....             LDR.N    R1,??DataTable6_6
   \   000000E4   0x7008             STRB     R0,[R1, #+0]
   \   000000E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E8   0x2806             CMP      R0,#+6
   \   000000EA   0xD102             BNE.N    ??Process_BuzzerCtrl_7
    175                {
    176                  BuzzerQ_Head = 0;
   \   000000EC   0x....             LDR.N    R0,??DataTable6_6
   \   000000EE   0x2100             MOVS     R1,#+0
   \   000000F0   0x7001             STRB     R1,[R0, #+0]
    177                }
    178                Tim_Buzzer = 0;
   \                     ??Process_BuzzerCtrl_7:
   \   000000F2   0x....             LDR.N    R0,??DataTable6_9
   \   000000F4   0x2100             MOVS     R1,#+0
   \   000000F6   0x8001             STRH     R1,[R0, #+0]
    179                BuzzerQ_Stat = 1;
   \   000000F8   0x....             LDR.N    R0,??DataTable6_8
   \   000000FA   0x2101             MOVS     R1,#+1
   \   000000FC   0x7001             STRB     R1,[R0, #+0]
    180              }
    181            }
    182          }
   \                     ??Process_BuzzerCtrl_1:
   \   000000FE   0xBCF0             POP      {R4-R7}
   \   00000100   0x4770             BX       LR               ;; return
    183          
    184          #endif
    185          
    186          /**************************接口函数定义**************************/
    187          /************************************************************************************************ 
    188          * AuxiliaryFunction
    189          * 执行一些辅助功能,每场控制策略后被调用,如向调试工具发送数据、控制蜂鸣器等
    190          ************************************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    191          void AuxiliaryFunction(void) 
    192          {
   \                     AuxiliaryFunction:
   \   00000000   0xB580             PUSH     {R7,LR}
    193          #if EN_SDCard != 0     
    194            if(sd_yes == 1)     /*写SD卡，用于上位机调试*/
   \   00000002   0x....             LDR.N    R0,??DataTable6_13
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD109             BNE.N    ??AuxiliaryFunction_0
    195            { 
    196              Wait_SDRdy(SD_SHORT_Wait);
   \   0000000A   0xF241 0x3088      MOVW     R0,#+5000
   \   0000000E   0x.... 0x....      BL       Wait_SDRdy
    197              if(Flag_SDRdy)
   \   00000012   0x....             LDR.N    R0,??DataTable6_14
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD001             BEQ.N    ??AuxiliaryFunction_0
    198              {
    199                Write_SD();
   \   0000001A   0x.... 0x....      BL       Write_SD
    200              } 
    201            }
    202            C_WDOG_IntOn();
   \                     ??AuxiliaryFunction_0:
   \   0000001E   0xB672             CPSID i         
   \   00000020   0x....             LDR.N    R0,??DataTable6_15  ;; 0x4005200c
   \   00000022   0xF24A 0x6102      MOVW     R1,#+42498
   \   00000026   0x8001             STRH     R1,[R0, #+0]
   \   00000028   0x....             LDR.N    R0,??DataTable6_15  ;; 0x4005200c
   \   0000002A   0xF24B 0x4180      MOVW     R1,#+46208
   \   0000002E   0x8001             STRH     R1,[R0, #+0]
   \   00000030   0xB662             CPSIE i         
    203          #endif
    204          
    205          #if EN_OLED != 0
    206            C_WDOG_IntOn();
   \   00000032   0xB672             CPSID i         
   \   00000034   0x....             LDR.N    R0,??DataTable6_15  ;; 0x4005200c
   \   00000036   0xF24A 0x6102      MOVW     R1,#+42498
   \   0000003A   0x8001             STRH     R1,[R0, #+0]
   \   0000003C   0x....             LDR.N    R0,??DataTable6_15  ;; 0x4005200c
   \   0000003E   0xF24B 0x4180      MOVW     R1,#+46208
   \   00000042   0x8001             STRH     R1,[R0, #+0]
   \   00000044   0xB662             CPSIE i         
    207            if(OLED_Mask == 0)    
   \   00000046   0x....             LDR.N    R0,??DataTable6_16
   \   00000048   0x7800             LDRB     R0,[R0, #+0]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD101             BNE.N    ??AuxiliaryFunction_1
    208            {
    209              OLED_Proc();    
   \   0000004E   0x.... 0x....      BL       OLED_Proc
    210            } 
    211          #endif 
    212            
    213          }
   \                     ??AuxiliaryFunction_1:
   \   00000052   0xBD01             POP      {R0,PC}          ;; return
    214          /************************************************************************************************ 
    215          * BuzzerSet
    216          * 设定蜂鸣器的响声(!!!注意:该函数不具备可冲入性,禁止在中断里对其进行调用!!!)
    217          * 入口参数  tim_all:响声持续的总时间(单位:场)
    218                      tim_on1:第一周期内蜂鸣器开启的时间(单位:场)
    219                      tim_off1:第一周期内蜂鸣器关闭的时间(单位:场)
    220                      tim_on2:第二周期内蜂鸣器开启的时间(单位:场)
    221                      tim_off2:第二周期内蜂鸣器关闭的时间(单位:场)
    222          ************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    223          void BuzzerSet(INT16U tim_all,INT8U tim_on1,INT8U tim_off1,INT8U tim_on2,INT8U tim_off2)
    224          {
   \                     BuzzerSet:
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x9C03             LDR      R4,[SP, #+12]
    225          #if EN_Buzzer != 0
    226            
    227            BuzzerData_t *pbzr; 
    228            
    229            if(tim_all != 0 && BuzzerQ_Stat != 0)
   \   00000004   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD029             BEQ.N    ??BuzzerSet_0
   \   0000000A   0x....             LDR.N    R5,??DataTable6_8
   \   0000000C   0x782D             LDRB     R5,[R5, #+0]
   \   0000000E   0x2D00             CMP      R5,#+0
   \   00000010   0xD025             BEQ.N    ??BuzzerSet_0
    230            { /*将响声的信息入队*/
    231              pbzr = &BuzzerQ[BuzzerQ_Rear];
   \   00000012   0x....             LDR.N    R5,??DataTable6_7
   \   00000014   0x782D             LDRB     R5,[R5, #+0]
   \   00000016   0x....             LDR.N    R6,??DataTable6_10
   \   00000018   0xEB16 0x05C5      ADDS     R5,R6,R5, LSL #+3
    232              pbzr->Tim_All = tim_all;
   \   0000001C   0x8028             STRH     R0,[R5, #+0]
    233              pbzr->Tim_On1 = tim_on1;
   \   0000001E   0x7129             STRB     R1,[R5, #+4]
    234              pbzr->Tim_Off1 = tim_off1;
   \   00000020   0x716A             STRB     R2,[R5, #+5]
    235              pbzr->Tim_On2 = tim_on2;
   \   00000022   0x71AB             STRB     R3,[R5, #+6]
    236              pbzr->Tim_Off2 = tim_off2;
   \   00000024   0x71EC             STRB     R4,[R5, #+7]
    237              pbzr->Tim_Total = tim_on1 + tim_off1 + tim_on2 + tim_off2;
   \   00000026   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000028   0xFA52 0xF081      UXTAB    R0,R2,R1
   \   0000002C   0xFA50 0xF083      UXTAB    R0,R0,R3
   \   00000030   0xFA50 0xF084      UXTAB    R0,R0,R4
   \   00000034   0x8068             STRH     R0,[R5, #+2]
    238                
    239              if((++BuzzerQ_Rear) == NUM_BuzzerQ)
   \   00000036   0x....             LDR.N    R0,??DataTable6_7
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x1C40             ADDS     R0,R0,#+1
   \   0000003C   0x....             LDR.N    R1,??DataTable6_7
   \   0000003E   0x7008             STRB     R0,[R1, #+0]
   \   00000040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   0x2806             CMP      R0,#+6
   \   00000044   0xD102             BNE.N    ??BuzzerSet_1
    240              {
    241                BuzzerQ_Rear = 0; 
   \   00000046   0x....             LDR.N    R0,??DataTable6_7
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0x7001             STRB     R1,[R0, #+0]
    242              }
    243              
    244              /*队满的判定*/
    245              if(BuzzerQ_Rear == BuzzerQ_Head)    
   \                     ??BuzzerSet_1:
   \   0000004C   0x....             LDR.N    R0,??DataTable6_7
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x....             LDR.N    R1,??DataTable6_6
   \   00000052   0x7809             LDRB     R1,[R1, #+0]
   \   00000054   0x4288             CMP      R0,R1
   \   00000056   0xD102             BNE.N    ??BuzzerSet_0
    246              {
    247                BuzzerQ_Stat = 0;
   \   00000058   0x....             LDR.N    R0,??DataTable6_8
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x7001             STRB     R1,[R0, #+0]
    248              }
    249            }
    250          
    251          #else
    252          
    253            (void)tim_all;      /*避免编译器的警告*/
    254            (void)tim_on1;
    255            (void)tim_off1;
    256            (void)tim_on2;
    257            (void)tim_off2;
    258                
    259          #endif
    260          }
   \                     ??BuzzerSet_0:
   \   0000005E   0xBC70             POP      {R4-R6}
   \   00000060   0x4770             BX       LR               ;; return
    261          

   \                                 In section .text, align 2, keep-with-next
    262          void ProcessKeyPad(INT16U * Key_Value)
    263          {
    264            
    265          }
   \                     ProcessKeyPad:
   \   00000000   0x4770             BX       LR               ;; return
    266          /************************************************************************************************ 
    267          * ExtInit_Normal
    268          * 正常启动时的额外初始化,包括设定系统时钟中断里的回调函数、设定参数、初始化调试工具等功能
    269          ************************************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    270          void ExtInit_Normal(void)
    271          {
   \                     ExtInit_Normal:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    272            /*设定中断里的回调函数*/
    273            Boma=ReadBomaValue();
   \   00000004   0x.... 0x....      BL       ReadBomaValue
   \   00000008   0x....             LDR.N    R1,??DataTable6_17
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    274           
    275            switch(Boma & 0x03)
   \   0000000C   0x....             LDR.N    R0,??DataTable6_17
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD005             BEQ.N    ??ExtInit_Normal_0
   \   0000001A   0x2802             CMP      R0,#+2
   \   0000001C   0xD005             BEQ.N    ??ExtInit_Normal_1
   \   0000001E   0xD303             BCC.N    ??ExtInit_Normal_2
   \   00000020   0x2803             CMP      R0,#+3
   \   00000022   0xD003             BEQ.N    ??ExtInit_Normal_3
   \   00000024   0xE003             B.N      ??ExtInit_Normal_4
    276            {
    277              case 0  :
    278                        
    279                        break;
   \                     ??ExtInit_Normal_0:
   \   00000026   0xE002             B.N      ??ExtInit_Normal_5
    280              case 1  :
    281                        
    282                        break;
   \                     ??ExtInit_Normal_2:
   \   00000028   0xE001             B.N      ??ExtInit_Normal_5
    283              case 2  :
    284                       
    285                        break;
   \                     ??ExtInit_Normal_1:
   \   0000002A   0xE000             B.N      ??ExtInit_Normal_5
    286              case 3  :
    287                       
    288                        break;
   \                     ??ExtInit_Normal_3:
   \   0000002C   0xE7FF             B.N      ??ExtInit_Normal_5
    289              default : 
    290                        
    291                        break;
    292            }
    293          #if EN_LED != 0
    294            LED_Init();
   \                     ??ExtInit_Normal_4:
   \                     ??ExtInit_Normal_5:
   \   0000002E   0x.... 0x....      BL       LED_Init
    295            LedCtlSet(LED_Warning);
   \   00000032   0x2005             MOVS     R0,#+5
   \   00000034   0x9001             STR      R0,[SP, #+4]
   \   00000036   0x200A             MOVS     R0,#+10
   \   00000038   0x9000             STR      R0,[SP, #+0]
   \   0000003A   0x2305             MOVS     R3,#+5
   \   0000003C   0x221E             MOVS     R2,#+30
   \   0000003E   0x2164             MOVS     R1,#+100
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x.... 0x....      BL       LedCtlSet
    296            C_WDOG_IntOn();
   \   00000046   0xB672             CPSID i         
   \   00000048   0x....             LDR.N    R0,??DataTable6_15  ;; 0x4005200c
   \   0000004A   0xF24A 0x6102      MOVW     R1,#+42498
   \   0000004E   0x8001             STRH     R1,[R0, #+0]
   \   00000050   0x....             LDR.N    R0,??DataTable6_15  ;; 0x4005200c
   \   00000052   0xF24B 0x4180      MOVW     R1,#+46208
   \   00000056   0x8001             STRH     R1,[R0, #+0]
   \   00000058   0xB662             CPSIE i         
    297          #endif
    298            
    299          #if EN_OLED != 0
    300              if(0 == OLED_Mask && KOS_OK != OLED_Init()) { OLED_Mask = 1; OLED_Close(); }
   \   0000005A   0x....             LDR.N    R0,??DataTable6_16
   \   0000005C   0x7800             LDRB     R0,[R0, #+0]
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD108             BNE.N    ??ExtInit_Normal_6
   \   00000062   0x.... 0x....      BL       OLED_Init
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD004             BEQ.N    ??ExtInit_Normal_6
   \   0000006A   0x....             LDR.N    R0,??DataTable6_16
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x7001             STRB     R1,[R0, #+0]
   \   00000070   0x.... 0x....      BL       OLED_Close
    301          #endif
    302            C_WDOG_IntOn();
   \                     ??ExtInit_Normal_6:
   \   00000074   0xB672             CPSID i         
   \   00000076   0x....             LDR.N    R0,??DataTable6_15  ;; 0x4005200c
   \   00000078   0xF24A 0x6102      MOVW     R1,#+42498
   \   0000007C   0x8001             STRH     R1,[R0, #+0]
   \   0000007E   0x....             LDR.N    R0,??DataTable6_15  ;; 0x4005200c
   \   00000080   0xF24B 0x4180      MOVW     R1,#+46208
   \   00000084   0x8001             STRH     R1,[R0, #+0]
   \   00000086   0xB662             CPSIE i         
    303          #if EN_KeyPad != 0
    304            if(KeyPad_Mask == 0)
   \   00000088   0x....             LDR.N    R0,??DataTable6_18
   \   0000008A   0x7800             LDRB     R0,[R0, #+0]
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD104             BNE.N    ??ExtInit_Normal_7
    305            {
    306              KeyPad_Init(ProcessKeyPad);
   \   00000090   0x....             LDR.N    R0,??DataTable6_19
   \   00000092   0x.... 0x....      BL       KeyPad_Init
    307              ExtKey_Init();    
   \   00000096   0x.... 0x....      BL       ExtKey_Init
    308            }  
    309          #endif
    310            C_WDOG_IntOn();
   \                     ??ExtInit_Normal_7:
   \   0000009A   0xB672             CPSID i         
   \   0000009C   0x....             LDR.N    R0,??DataTable6_15  ;; 0x4005200c
   \   0000009E   0xF24A 0x6102      MOVW     R1,#+42498
   \   000000A2   0x8001             STRH     R1,[R0, #+0]
   \   000000A4   0x....             LDR.N    R0,??DataTable6_15  ;; 0x4005200c
   \   000000A6   0xF24B 0x4180      MOVW     R1,#+46208
   \   000000AA   0x8001             STRH     R1,[R0, #+0]
   \   000000AC   0xB662             CPSIE i         
    311            /*蜂鸣器控制初始化*/
    312          #if EN_Buzzer != 0
    313            BuzzerCtrl_Init();
   \   000000AE   0x.... 0x....      BL       BuzzerCtrl_Init
    314          #endif
    315            /*调试工具的初始化*/
    316          #if EN_SDCard != 0   
    317            SD_System_Init();          /*SD卡初始化*/
   \   000000B2   0x.... 0x....      BL       SD_System_Init
    318            if(sd_yes == 0)
   \   000000B6   0x....             LDR.N    R0,??DataTable6_13
   \   000000B8   0x7800             LDRB     R0,[R0, #+0]
   \   000000BA   0x2800             CMP      R0,#+0
   \   000000BC   0xD109             BNE.N    ??ExtInit_Normal_8
    319            {
    320              LedCtlSet(LED_SysErr);
   \   000000BE   0x2005             MOVS     R0,#+5
   \   000000C0   0x9001             STR      R0,[SP, #+4]
   \   000000C2   0x2014             MOVS     R0,#+20
   \   000000C4   0x9000             STR      R0,[SP, #+0]
   \   000000C6   0x230A             MOVS     R3,#+10
   \   000000C8   0x2214             MOVS     R2,#+20
   \   000000CA   0x21FA             MOVS     R1,#+250
   \   000000CC   0x2001             MOVS     R0,#+1
   \   000000CE   0x.... 0x....      BL       LedCtlSet
    321            }
    322          #endif 
    323            C_WDOG_IntOn();
   \                     ??ExtInit_Normal_8:
   \   000000D2   0xB672             CPSID i         
   \   000000D4   0x....             LDR.N    R0,??DataTable6_15  ;; 0x4005200c
   \   000000D6   0xF24A 0x6102      MOVW     R1,#+42498
   \   000000DA   0x8001             STRH     R1,[R0, #+0]
   \   000000DC   0x....             LDR.N    R0,??DataTable6_15  ;; 0x4005200c
   \   000000DE   0xF24B 0x4180      MOVW     R1,#+46208
   \   000000E2   0x8001             STRH     R1,[R0, #+0]
   \   000000E4   0xB662             CPSIE i         
    324            BuzzerSet(BZR_SysStart);
   \   000000E6   0x2014             MOVS     R0,#+20
   \   000000E8   0x9000             STR      R0,[SP, #+0]
   \   000000EA   0x2328             MOVS     R3,#+40
   \   000000EC   0x220A             MOVS     R2,#+10
   \   000000EE   0x2132             MOVS     R1,#+50
   \   000000F0   0x20F0             MOVS     R0,#+240
   \   000000F2   0x.... 0x....      BL       BuzzerSet
    325          }
   \   000000F6   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     Cnt_SDbufS1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     Cnt_SDbufS2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     Cnt_SDbufS3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     Cnt_SDbufS4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     Cnt_SDbufS5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     ??cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     BuzzerQ_Head

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     BuzzerQ_Rear

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     BuzzerQ_Stat

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     Tim_Buzzer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x........         DC32     BuzzerQ

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x400FF108         DC32     0x400ff108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x400FF104         DC32     0x400ff104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x........         DC32     sd_yes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x........         DC32     Flag_SDRdy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x4005200C         DC32     0x4005200c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0x........         DC32     OLED_Mask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   0x........         DC32     Boma

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \   00000000   0x........         DC32     KeyPad_Mask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \   00000000   0x........         DC32     ProcessKeyPad

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  AuxiliaryFunction
              8 -> OLED_Proc
              8 -> Wait_SDRdy
              8 -> Write_SD
       24  BufTest_SD
             24 -> WriteVar_SD
             24 -> writebyte_ram
        0  BuzzerCtrl_Init
       12  BuzzerSet
       16  ExtInit_Normal
             16 -> BuzzerCtrl_Init
             16 -> BuzzerSet
             16 -> ExtKey_Init
             16 -> KeyPad_Init
             16 -> LED_Init
             16 -> LedCtlSet
             16 -> OLED_Close
             16 -> OLED_Init
             16 -> ReadBomaValue
             16 -> SD_System_Init
        0  ProcessKeyPad
       16  Process_BuzzerCtrl
       16  WriteVar_SD
             16 -> writebyte_ram
        8  Write_SD
              8 -> BufTest_SD
              8 -> write_stop
              8 -> writebyte_ram


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      84  AuxiliaryFunction
     108  BufTest_SD
      26  BuzzerCtrl_Init
      48  BuzzerQ
       1  BuzzerQ_Head
       1  BuzzerQ_Rear
       1  BuzzerQ_Stat
      98  BuzzerSet
     248  ExtInit_Normal
       2  ProcessKeyPad
     258  Process_BuzzerCtrl
       2  Tim_Buzzer
      80  WriteVar_SD
      74  Write_SD
       2  cnt

 
    55 bytes in section .bss
 1 058 bytes in section .text
 
 1 058 bytes of CODE memory
    55 bytes of DATA memory

Errors: none
Warnings: 1

###############################################################################
#                                                                             #
#                                                       03/Nov/2015  20:45:52 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\OLED\OLED.c     #
#    Command line =  C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\OLED\OLED.c -D  #
#                    COMPILER_IAR -lCN "C:\Users\WangChangan\Desktop\K10Ð¡°å¶ #
#                    ¨¸å\IAR Files\FLASH\List\" -lB                           #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\FLASH\List\" -o "C:\Users\WangChangan\Desktop\K10Ð #
#                    ¡°å¶¨¸å\IAR Files\FLASH\Obj\" --no_cse --no_unroll       #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\Project_Headers\" -I                            #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\KinetisDrivers\" -I                             #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\ExtraFunction\" -I                              #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\Hardware_Interface\" -I                         #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\Make_Decision\" -I                              #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\Math\" -I "C:\Users\WangChangan\Desktop\K10Ð¡°å #
#                    ¶¨¸å\IAR Files\..\Original_Process\" -I                  #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\Platform\" -I "C:\Users\WangChangan\Desktop\K10 #
#                    Ð¡°å¶¨¸å\IAR Files\..\SD_System\" -I                     #
#                    "C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR            #
#                    Files\..\Source\" -I "C:\Users\WangChangan\Desktop\K10Ð¡ #
#                    °å¶¨¸å\IAR Files\..\System_Init\" -Ol                    #
#    List file    =  C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR             #
#                    Files\FLASH\List\OLED.lst                                #
#    Object file  =  C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\IAR             #
#                    Files\FLASH\Obj\OLED.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\WangChangan\Desktop\K10Ð¡°å¶¨¸å\OLED\OLED.c
      1          /************************************************************************************************
      2          
      3          * OLED.c
      4          
      5          * Ê¹ÓÃOLEDÄ£¿é½øÐÐµ÷ÊÔÓ²¼þÖ§³ÖÄ£¿é
      6            
      7          * Ö÷¿ØÐ¾Æ¬£ºMK10DN512VLL10
      8            ¿ª·¢Æ½Ì¨£ºIAR Embedded Workbench 6.3
      9            
     10          * ×÷Õß£º Íõ²ý°²  (µÚÊ®½ìÉãÏñÍ·)  
     11          
     12          ************************************************************************************************/
     13          #include "./OLED.h"
     14          #include "../TypeAdapter/TypeAdapter.h"
     15          #include <stdlib.h>
     16          

   \                                 In section .bss, align 4
     17          t_OLED_GRAM ptrDisplay_GRAM = NULL;
   \                     ptrDisplay_GRAM:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     18          INT8U OLED_Mask=0;//Ä¬ÈÏ²»ÆÁ±ÎÒº¾§
   \                     OLED_Mask:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     19          INT8U OLED_IsLowPwr=0;//Ä¬ÈÏ¿ªÆôÒº¾§ÏÔÊ¾
   \                     OLED_IsLowPwr:
   \   00000000                      DS8 1

   \                                 In section .rodata, align 4
     20          void * const DataMap[PARAM_SHOW_LENGTH][3] = 
   \                     DataMap:
   \   00000000   0x........         DC32 `?<Constant "sdbus">`, OLED_Mask, 0H, `?<Constant "MAXspeed">`
   \              0x........   
   \              0x00000000   
   \              0x........   
   \   00000010   0x........         DC32 OLED_Mask, 0H, `?<Constant "MAXspeed">`, OLED_Mask, 0H
   \              0x00000000   
   \              0x........   
   \              0x........   
   \              0x00000000   
   \   00000024   0x........         DC32 `?<Constant "MAXspeed">`, OLED_Mask, 0H, `?<Constant "MAXspeed">`
   \              0x........   
   \              0x00000000   
   \              0x........   
   \   00000034   0x........         DC32 OLED_Mask, 0H
   \              0x00000000   
     21          {
     22            {"sdbus",&OLED_Mask,(void *)Type_INT8U},
     23            {"MAXspeed",&OLED_Mask,(void *)Type_INT8U},
     24            {"MAXspeed",&OLED_Mask,(void *)Type_INT8U},
     25            {"MAXspeed",&OLED_Mask,(void *)Type_INT8U},
     26            {"MAXspeed",&OLED_Mask,(void *)Type_INT8U},
     27          };

   \                                 In section .bss, align 8
     28          ParamSt stDataMap[PARAM_SHOW_LENGTH];
   \                     stDataMap:
   \   00000000                      DS8 120
     29          
     30          //³£ÓÃASCII±í
     31          //Æ«ÒÆÁ¿32
     32          //ASCII×Ö·û¼¯
     33          //Æ«ÒÆÁ¿32
     34          //´óÐ¡:12*6

   \                                 In section .rodata, align 4
     35          const unsigned char ASCII_0608[][6]={
   \                     ASCII_0608:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x5F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x07 0x00    
   \              0x07 0x00    
   \              0x00 0x14    
   \              0x7F         
   \   00000015   0x14 0x7F          DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 35, 19, 8, 100, 98, 0, 54
   \              0x14 0x00    
   \              0x24 0x2A    
   \              0x7F 0x2A    
   \              0x12 0x00    
   \              0x23 0x13    
   \              0x08 0x64    
   \              0x62 0x00    
   \              0x36         
   \   00000026   0x49 0x55          DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
   \              0x22 0x50    
   \              0x00 0x00    
   \              0x05 0x03    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x1C 0x22    
   \              0x41 0x00    
   \              0x00 0x00    
   \              0x41 0x22    
   \   0000003A   0x1C 0x00          DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 80, 48, 0, 0
   \              0x00 0x14    
   \              0x08 0x3E    
   \              0x08 0x14    
   \              0x00 0x08    
   \              0x08 0x3E    
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x50 0x30    
   \              0x00 0x00    
   \   0000004E   0x00 0x08          DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x60 0x60    
   \              0x00 0x00    
   \              0x00 0x20    
   \              0x10 0x08    
   \              0x04 0x02    
   \              0x00 0x3E    
   \              0x51         
   \   00000063   0x49 0x45          DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
   \              0x3E 0x00    
   \              0x00 0x42    
   \              0x7F 0x40    
   \              0x00 0x00    
   \              0x42 0x61    
   \              0x51 0x49    
   \              0x46 0x00    
   \              0x21 0x41    
   \   00000075   0x45 0x4B          DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
   \              0x31 0x00    
   \              0x18 0x14    
   \              0x12 0x7F    
   \              0x10 0x00    
   \              0x27 0x45    
   \              0x45 0x45    
   \              0x39 0x00    
   \              0x3C         
   \   00000086   0x4A 0x49          DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
   \              0x49 0x30    
   \              0x00 0x01    
   \              0x71 0x09    
   \              0x05 0x03    
   \              0x00 0x36    
   \              0x49 0x49    
   \              0x49 0x36    
   \              0x00 0x06    
   \              0x49         
   \   00000099   0x49 0x29          DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
   \              0x1E 0x00    
   \              0x00 0x36    
   \              0x36 0x00    
   \              0x00 0x00    
   \              0x00 0x56    
   \              0x36 0x00    
   \              0x00 0x00    
   \              0x08 0x14    
   \              0x22         
   \   000000AC   0x41 0x00          DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
   \              0x00 0x14    
   \              0x14 0x14    
   \              0x14 0x14    
   \              0x00 0x00    
   \              0x41 0x22    
   \              0x14 0x08    
   \              0x00 0x02    
   \              0x01 0x51    
   \              0x09         
   \   000000BF   0x06 0x00          DC8 6, 0, 50, 73, 121, 65, 62, 0, 126, 17, 17, 17, 126, 0, 127, 73, 73
   \              0x32 0x49    
   \              0x79 0x41    
   \              0x3E 0x00    
   \              0x7E 0x11    
   \              0x11 0x11    
   \              0x7E 0x00    
   \              0x7F 0x49    
   \              0x49         
   \   000000D0   0x49 0x36          DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
   \              0x00 0x3E    
   \              0x41 0x41    
   \              0x41 0x22    
   \              0x00 0x7F    
   \              0x41 0x41    
   \              0x22 0x1C    
   \              0x00 0x7F    
   \              0x49         
   \   000000E1   0x49 0x49          DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
   \              0x41 0x00    
   \              0x7F 0x09    
   \              0x09 0x09    
   \              0x01 0x00    
   \              0x3E 0x41    
   \              0x49 0x49    
   \              0x7A 0x00    
   \              0x7F 0x08    
   \   000000F3   0x08 0x08          DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
   \              0x7F 0x00    
   \              0x00 0x41    
   \              0x7F 0x41    
   \              0x00 0x00    
   \              0x20 0x40    
   \              0x41 0x3F    
   \              0x01 0x00    
   \              0x7F 0x08    
   \   00000105   0x14 0x22          DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
   \              0x41 0x00    
   \              0x7F 0x40    
   \              0x40 0x40    
   \              0x40 0x00    
   \              0x7F 0x02    
   \              0x0C 0x02    
   \              0x7F 0x00    
   \              0x7F         
   \   00000116   0x04 0x08          DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
   \              0x10 0x7F    
   \              0x00 0x3E    
   \              0x41 0x41    
   \              0x41 0x3E    
   \              0x00 0x7F    
   \              0x09 0x09    
   \              0x09 0x06    
   \              0x00 0x3E    
   \              0x41         
   \   00000129   0x51 0x21          DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
   \              0x5E 0x00    
   \              0x7F 0x09    
   \              0x19 0x29    
   \              0x46 0x00    
   \              0x46 0x49    
   \              0x49 0x49    
   \              0x31 0x00    
   \              0x01 0x01    
   \   0000013B   0x7F 0x01          DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
   \              0x01 0x00    
   \              0x3F 0x40    
   \              0x40 0x40    
   \              0x3F 0x00    
   \              0x1F 0x20    
   \              0x40 0x20    
   \              0x1F 0x00    
   \              0x3F 0x40    
   \   0000014D   0x38 0x40          DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
   \              0x3F 0x00    
   \              0x63 0x14    
   \              0x08 0x14    
   \              0x63 0x00    
   \              0x07 0x08    
   \              0x70 0x08    
   \              0x07 0x00    
   \              0x61 0x51    
   \              0x49         
   \   00000160   0x45 0x43          DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 2, 4, 8, 16, 32, 0, 0, 65, 65, 127
   \              0x00 0x00    
   \              0x7F 0x41    
   \              0x41 0x00    
   \              0x00 0x02    
   \              0x04 0x08    
   \              0x10 0x20    
   \              0x00 0x00    
   \              0x41 0x41    
   \              0x7F         
   \   00000173   0x00 0x00          DC8 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0, 0, 32
   \              0x04 0x02    
   \              0x01 0x02    
   \              0x04 0x00    
   \              0x40 0x40    
   \              0x40 0x40    
   \              0x40 0x00    
   \              0x00 0x01    
   \              0x02 0x04    
   \              0x00 0x00    
   \              0x20         
   \   00000188   0x54 0x54          DC8 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68, 32, 0
   \              0x54 0x78    
   \              0x00 0x7F    
   \              0x48 0x44    
   \              0x44 0x38    
   \              0x00 0x38    
   \              0x44 0x44    
   \              0x44 0x20    
   \              0x00         
   \   00000199   0x38 0x44          DC8 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1, 2, 0
   \              0x44 0x48    
   \              0x7F 0x00    
   \              0x38 0x54    
   \              0x54 0x54    
   \              0x18 0x00    
   \              0x08 0x7E    
   \              0x09 0x01    
   \              0x02 0x00    
   \   000001AB   0x0C 0x52          DC8 12, 82, 82, 82, 62, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125, 64, 0, 0
   \              0x52 0x52    
   \              0x3E 0x00    
   \              0x7F 0x08    
   \              0x04 0x04    
   \              0x78 0x00    
   \              0x00 0x44    
   \              0x7D 0x40    
   \              0x00 0x00    
   \   000001BD   0x20 0x40          DC8 32, 64, 68, 61, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65, 127, 64, 0, 0
   \              0x44 0x3D    
   \              0x00 0x00    
   \              0x7F 0x10    
   \              0x28 0x44    
   \              0x00 0x00    
   \              0x00 0x41    
   \              0x7F 0x40    
   \              0x00 0x00    
   \   000001CF   0x7C 0x04          DC8 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68, 68, 68, 56, 0
   \              0x18 0x04    
   \              0x78 0x00    
   \              0x7C 0x08    
   \              0x04 0x04    
   \              0x78 0x00    
   \              0x38 0x44    
   \              0x44 0x44    
   \              0x38 0x00    
   \   000001E1   0x7C 0x14          DC8 124, 20, 20, 20, 8, 0, 8, 20, 20, 24, 124, 0, 124, 8, 4, 4, 8, 0
   \              0x14 0x14    
   \              0x08 0x00    
   \              0x08 0x14    
   \              0x14 0x18    
   \              0x7C 0x00    
   \              0x7C 0x08    
   \              0x04 0x04    
   \              0x08 0x00    
   \   000001F3   0x48 0x54          DC8 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64, 64, 32, 124, 0
   \              0x54 0x54    
   \              0x20 0x00    
   \              0x04 0x3F    
   \              0x44 0x40    
   \              0x20 0x00    
   \              0x3C 0x40    
   \              0x40 0x20    
   \              0x7C 0x00    
   \   00000205   0x1C 0x20          DC8 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68, 40, 16, 40, 68, 0
   \              0x40 0x20    
   \              0x1C 0x00    
   \              0x3C 0x40    
   \              0x30 0x40    
   \              0x3C 0x00    
   \              0x44 0x28    
   \              0x10 0x28    
   \              0x44 0x00    
   \   00000217   0x0C 0x50          DC8 12, 80, 80, 80, 60, 0, 68, 100, 84, 76, 68, 0, 0, 8, 54, 65, 0, 0
   \              0x50 0x50    
   \              0x3C 0x00    
   \              0x44 0x64    
   \              0x54 0x4C    
   \              0x44 0x00    
   \              0x00 0x08    
   \              0x36 0x41    
   \              0x00 0x00    
   \   00000229   0x00 0x00          DC8 0, 0, 127, 0, 0, 0, 0, 65, 54, 8, 0, 0, 16, 8, 8, 16, 8, 0, 120, 70
   \              0x7F 0x00    
   \              0x00 0x00    
   \              0x00 0x41    
   \              0x36 0x08    
   \              0x00 0x00    
   \              0x10 0x08    
   \              0x08 0x10    
   \              0x08 0x00    
   \              0x78 0x46    
   \   0000023D   0x41 0x46          DC8 65, 70, 120
   \              0x78         
     36             {0x00, 0x00, 0x00, 0x00, 0x00, 0x00} // 20
     37            ,{0x00, 0x00, 0x00, 0x5f, 0x00, 0x00} // 21 !
     38            ,{0x00, 0x00, 0x07, 0x00, 0x07, 0x00} // 22 "
     39            ,{0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14} // 23 #
     40            ,{0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12} // 24 $
     41            ,{0x00, 0x23, 0x13, 0x08, 0x64, 0x62} // 25 %
     42            ,{0x00, 0x36, 0x49, 0x55, 0x22, 0x50} // 26 &
     43            ,{0x00, 0x00, 0x05, 0x03, 0x00, 0x00} // 27 '
     44            ,{0x00, 0x00, 0x1c, 0x22, 0x41, 0x00} // 28 (
     45            ,{0x00, 0x00, 0x41, 0x22, 0x1c, 0x00} // 29 )
     46            ,{0x00, 0x14, 0x08, 0x3e, 0x08, 0x14} // 2a *
     47            ,{0x00, 0x08, 0x08, 0x3e, 0x08, 0x08} // 2b +
     48            ,{0x00, 0x00, 0x50, 0x30, 0x00, 0x00} // 2c ,
     49            ,{0x00, 0x08, 0x08, 0x08, 0x08, 0x08} // 2d -
     50            ,{0x00, 0x00, 0x60, 0x60, 0x00, 0x00} // 2e .
     51            ,{0x00, 0x20, 0x10, 0x08, 0x04, 0x02} // 2f /
     52            ,{0x00, 0x3e, 0x51, 0x49, 0x45, 0x3e} // 30 0
     53            ,{0x00, 0x00, 0x42, 0x7f, 0x40, 0x00} // 31 1
     54            ,{0x00, 0x42, 0x61, 0x51, 0x49, 0x46} // 32 2
     55            ,{0x00, 0x21, 0x41, 0x45, 0x4b, 0x31} // 33 3
     56            ,{0x00, 0x18, 0x14, 0x12, 0x7f, 0x10} // 34 4
     57            ,{0x00, 0x27, 0x45, 0x45, 0x45, 0x39} // 35 5
     58            ,{0x00, 0x3c, 0x4a, 0x49, 0x49, 0x30} // 36 6
     59            ,{0x00, 0x01, 0x71, 0x09, 0x05, 0x03} // 37 7
     60            ,{0x00, 0x36, 0x49, 0x49, 0x49, 0x36} // 38 8
     61            ,{0x00, 0x06, 0x49, 0x49, 0x29, 0x1e} // 39 9
     62            ,{0x00, 0x00, 0x36, 0x36, 0x00, 0x00} // 3a :
     63            ,{0x00, 0x00, 0x56, 0x36, 0x00, 0x00} // 3b ;
     64            ,{0x00, 0x08, 0x14, 0x22, 0x41, 0x00} // 3c <
     65            ,{0x00, 0x14, 0x14, 0x14, 0x14, 0x14} // 3d =
     66            ,{0x00, 0x00, 0x41, 0x22, 0x14, 0x08} // 3e >
     67            ,{0x00, 0x02, 0x01, 0x51, 0x09, 0x06} // 3f ?
     68            ,{0x00, 0x32, 0x49, 0x79, 0x41, 0x3e} // 40 @
     69            ,{0x00, 0x7e, 0x11, 0x11, 0x11, 0x7e} // 41 A
     70            ,{0x00, 0x7f, 0x49, 0x49, 0x49, 0x36} // 42 B
     71            ,{0x00, 0x3e, 0x41, 0x41, 0x41, 0x22} // 43 C
     72            ,{0x00, 0x7f, 0x41, 0x41, 0x22, 0x1c} // 44 D
     73            ,{0x00, 0x7f, 0x49, 0x49, 0x49, 0x41} // 45 E
     74            ,{0x00, 0x7f, 0x09, 0x09, 0x09, 0x01} // 46 F
     75            ,{0x00, 0x3e, 0x41, 0x49, 0x49, 0x7a} // 47 G
     76            ,{0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f} // 48 H
     77            ,{0x00, 0x00, 0x41, 0x7f, 0x41, 0x00} // 49 I
     78            ,{0x00, 0x20, 0x40, 0x41, 0x3f, 0x01} // 4a J
     79            ,{0x00, 0x7f, 0x08, 0x14, 0x22, 0x41} // 4b K
     80            ,{0x00, 0x7f, 0x40, 0x40, 0x40, 0x40} // 4c L
     81            ,{0x00, 0x7f, 0x02, 0x0c, 0x02, 0x7f} // 4d M
     82            ,{0x00, 0x7f, 0x04, 0x08, 0x10, 0x7f} // 4e N
     83            ,{0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e} // 4f O
     84            ,{0x00, 0x7f, 0x09, 0x09, 0x09, 0x06} // 50 P
     85            ,{0x00, 0x3e, 0x41, 0x51, 0x21, 0x5e} // 51 Q
     86            ,{0x00, 0x7f, 0x09, 0x19, 0x29, 0x46} // 52 R
     87            ,{0x00, 0x46, 0x49, 0x49, 0x49, 0x31} // 53 S
     88            ,{0x00, 0x01, 0x01, 0x7f, 0x01, 0x01} // 54 T
     89            ,{0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f} // 55 U
     90            ,{0x00, 0x1f, 0x20, 0x40, 0x20, 0x1f} // 56 V
     91            ,{0x00, 0x3f, 0x40, 0x38, 0x40, 0x3f} // 57 W
     92            ,{0x00, 0x63, 0x14, 0x08, 0x14, 0x63} // 58 X
     93            ,{0x00, 0x07, 0x08, 0x70, 0x08, 0x07} // 59 Y
     94            ,{0x00, 0x61, 0x51, 0x49, 0x45, 0x43} // 5a Z
     95            ,{0x00, 0x00, 0x7f, 0x41, 0x41, 0x00} // 5b [
     96            ,{0x00, 0x02, 0x04, 0x08, 0x10, 0x20} // 5c \//
     97            ,{0x00, 0x00, 0x41, 0x41, 0x7f, 0x00} // 5d ]
     98            ,{0x00, 0x04, 0x02, 0x01, 0x02, 0x04} // 5e ^
     99            ,{0x00, 0x40, 0x40, 0x40, 0x40, 0x40} // 5f _
    100            ,{0x00, 0x00, 0x01, 0x02, 0x04, 0x00} // 60 `
    101            ,{0x00, 0x20, 0x54, 0x54, 0x54, 0x78} // 61 a
    102            ,{0x00, 0x7f, 0x48, 0x44, 0x44, 0x38} // 62 b
    103            ,{0x00, 0x38, 0x44, 0x44, 0x44, 0x20} // 63 c
    104            ,{0x00, 0x38, 0x44, 0x44, 0x48, 0x7f} // 64 d
    105            ,{0x00, 0x38, 0x54, 0x54, 0x54, 0x18} // 65 e
    106            ,{0x00, 0x08, 0x7e, 0x09, 0x01, 0x02} // 66 f
    107            ,{0x00, 0x0c, 0x52, 0x52, 0x52, 0x3e} // 67 g
    108            ,{0x00, 0x7f, 0x08, 0x04, 0x04, 0x78} // 68 h
    109            ,{0x00, 0x00, 0x44, 0x7d, 0x40, 0x00} // 69 i
    110            ,{0x00, 0x20, 0x40, 0x44, 0x3d, 0x00} // 6a j
    111            ,{0x00, 0x7f, 0x10, 0x28, 0x44, 0x00} // 6b k
    112            ,{0x00, 0x00, 0x41, 0x7f, 0x40, 0x00} // 6c l
    113            ,{0x00, 0x7c, 0x04, 0x18, 0x04, 0x78} // 6d m
    114            ,{0x00, 0x7c, 0x08, 0x04, 0x04, 0x78} // 6e n
    115            ,{0x00, 0x38, 0x44, 0x44, 0x44, 0x38} // 6f o
    116            ,{0x00, 0x7c, 0x14, 0x14, 0x14, 0x08} // 70 p
    117            ,{0x00, 0x08, 0x14, 0x14, 0x18, 0x7c} // 71 q
    118            ,{0x00, 0x7c, 0x08, 0x04, 0x04, 0x08} // 72 r
    119            ,{0x00, 0x48, 0x54, 0x54, 0x54, 0x20} // 73 s
    120            ,{0x00, 0x04, 0x3f, 0x44, 0x40, 0x20} // 74 t
    121            ,{0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c} // 75 u
    122            ,{0x00, 0x1c, 0x20, 0x40, 0x20, 0x1c} // 76 v
    123            ,{0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c} // 77 w
    124            ,{0x00, 0x44, 0x28, 0x10, 0x28, 0x44} // 78 x
    125            ,{0x00, 0x0c, 0x50, 0x50, 0x50, 0x3c} // 79 y
    126            ,{0x00, 0x44, 0x64, 0x54, 0x4c, 0x44} // 7a z
    127            ,{0x00, 0x00, 0x08, 0x36, 0x41, 0x00} // 7b {
    128            ,{0x00, 0x00, 0x00, 0x7f, 0x00, 0x00} // 7c |
    129            ,{0x00, 0x00, 0x41, 0x36, 0x08, 0x00} // 7d }
    130            ,{0x00, 0x10, 0x08, 0x08, 0x10, 0x08} // 7e ~
    131            ,{0x00, 0x78, 0x46, 0x41, 0x46, 0x78} // 7f (delete)
    132          };
    133          
    134          

   \                                 In section .text, align 2, keep-with-next
    135          static void OLED_IO_Init()
    136          { 
    137            //Never modify this function!  
    138            ((OLED_PORT_SCL)->PCR[OLED_INDEX_SCL]) = PORT_PCR_MUX(1);
   \                     OLED_IO_Init:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x4004a054
   \   00000004   0xF44F 0x7180      MOV      R1,#+256
   \   00000008   0x6001             STR      R1,[R0, #+0]
    139            ((OLED_PORT_SDA)->PCR[OLED_INDEX_SDA]) = PORT_PCR_MUX(1);
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x4004a004
   \   0000000E   0xF44F 0x7180      MOV      R1,#+256
   \   00000012   0x6001             STR      R1,[R0, #+0]
    140            ((OLED_PORT_DC)->PCR[OLED_INDEX_DC])   = PORT_PCR_MUX(1);
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable13_2  ;; 0x4004a00c
   \   00000018   0xF44F 0x7180      MOV      R1,#+256
   \   0000001C   0x6001             STR      R1,[R0, #+0]
    141            ((OLED_PORT_RST)->PCR[OLED_INDEX_RST]) = PORT_PCR_MUX(1);
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable13_3  ;; 0x4004a028
   \   00000022   0xF44F 0x7180      MOV      R1,#+256
   \   00000026   0x6001             STR      R1,[R0, #+0]
    142              
    143            OLED_PT_SCL->PDDR |= (1<<OLED_INDEX_SCL);
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable13_4  ;; 0x400ff054
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable13_4  ;; 0x400ff054
   \   00000036   0x6008             STR      R0,[R1, #+0]
    144            OLED_PT_SDA->PDDR |= (1<<OLED_INDEX_SDA);
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable13_4  ;; 0x400ff054
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable13_4  ;; 0x400ff054
   \   00000046   0x6008             STR      R0,[R1, #+0]
    145            OLED_PT_DC->PDDR  |= (1<<OLED_INDEX_DC);
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable13_4  ;; 0x400ff054
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable13_4  ;; 0x400ff054
   \   00000056   0x6008             STR      R0,[R1, #+0]
    146            OLED_PT_RST->PDDR |= (1<<OLED_INDEX_RST);
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable13_4  ;; 0x400ff054
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable13_4  ;; 0x400ff054
   \   00000066   0x6008             STR      R0,[R1, #+0]
    147          }
   \   00000068   0x4770             BX       LR               ;; return
    148          

   \                                 In section .text, align 2, keep-with-next
    149          static void OLED_ReqGram(void)
    150          {
   \                     OLED_ReqGram:
   \   00000000   0xB580             PUSH     {R7,LR}
    151            ptrDisplay_GRAM = (t_OLED_GRAM) malloc (8 * sizeof(t_OLED_GRAM));
   \   00000002   0x2020             MOVS     R0,#+32
   \   00000004   0x.... 0x....      BL       malloc
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable13_5
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    152          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    153          

   \                                 In section .text, align 2, keep-with-next
    154          static void OLED_FreeRam()
    155          {
   \                     OLED_FreeRam:
   \   00000000   0xB510             PUSH     {R4,LR}
    156            if(NULL != ptrDisplay_GRAM){ free(ptrDisplay_GRAM); }
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable13_5
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD004             BEQ.N    ??OLED_FreeRam_0
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable13_5
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       free
    157            ptrDisplay_GRAM = NULL;
   \                     ??OLED_FreeRam_0:
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable13_5
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6001             STR      R1,[R0, #+0]
    158            for(INT8U index = 0;index < PARAM_SHOW_LENGTH;++index)
   \   0000001E   0x2400             MOVS     R4,#+0
   \   00000020   0xE01A             B.N      ??OLED_FreeRam_1
    159            {
    160              if(NULL != stDataMap[index].lpstr)
   \                     ??OLED_FreeRam_2:
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x2018             MOVS     R0,#+24
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable13_6
   \   0000002A   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   0000002E   0x6880             LDR      R0,[R0, #+8]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD008             BEQ.N    ??OLED_FreeRam_3
    161                free(stDataMap[index].lpstr);
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x2018             MOVS     R0,#+24
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable13_6
   \   0000003C   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000040   0x6880             LDR      R0,[R0, #+8]
   \   00000042   0x.... 0x....      BL       free
    162              stDataMap[index].lpstr = NULL;
   \                     ??OLED_FreeRam_3:
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0x2018             MOVS     R0,#+24
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable13_6
   \   0000004E   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x6081             STR      R1,[R0, #+8]
    163            }
   \   00000056   0x1C64             ADDS     R4,R4,#+1
   \                     ??OLED_FreeRam_1:
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0x2C05             CMP      R4,#+5
   \   0000005C   0xD3E1             BCC.N    ??OLED_FreeRam_2
    164          }
   \   0000005E   0xBD10             POP      {R4,PC}          ;; return
    165          /*****************************************************************************
    166           º¯ Êý Ãû  : OLED_Write_Byte
    167           ¹¦ÄÜÃèÊö  : ÏòOLEDÐ´Êý¾Ý»òÕßÃüÁî
    168           ÊäÈë²ÎÊý  : Dat´ýÐ´Èë£¬OptÊý¾ÝÃüÁîÑ¡Ôñ£¨0ÃüÁî£¬1Êý¾Ý£© 
    169           Êä³ö²ÎÊý  : NONE
    170           ·µ »Ø Öµ  : NONE
    171          *****************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    172          static void OLED_Write_Byte(INT8U Dat,INT8U Opt)
    173          {
    174              INT8U index=8;
   \                     OLED_Write_Byte:
   \   00000000   0x2208             MOVS     R2,#+8
    175              
    176              if(Opt) OLED_DCH;
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD008             BEQ.N    ??OLED_Write_Byte_0
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable13_7  ;; 0x400ff044
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0xF051 0x0108      ORRS     R1,R1,#0x8
   \   00000012   0x.... 0x....      LDR.W    R3,??DataTable13_7  ;; 0x400ff044
   \   00000016   0x6019             STR      R1,[R3, #+0]
   \   00000018   0xE007             B.N      ??OLED_Write_Byte_1
    177              else OLED_DCL;  
   \                     ??OLED_Write_Byte_0:
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable13_8  ;; 0x400ff048
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0xF051 0x0108      ORRS     R1,R1,#0x8
   \   00000024   0x.... 0x....      LDR.W    R3,??DataTable13_8  ;; 0x400ff048
   \   00000028   0x6019             STR      R1,[R3, #+0]
    178              OLED_SCLL;
   \                     ??OLED_Write_Byte_1:
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable13_8  ;; 0x400ff048
   \   0000002E   0x6809             LDR      R1,[R1, #+0]
   \   00000030   0xF451 0x1100      ORRS     R1,R1,#0x200000
   \   00000034   0x.... 0x....      LDR.W    R3,??DataTable13_8  ;; 0x400ff048
   \   00000038   0x6019             STR      R1,[R3, #+0]
   \   0000003A   0xE019             B.N      ??OLED_Write_Byte_2
    179              
    180              while (index--)
    181              {
    182                  if(Dat&0x80){ OLED_SDAH; }
    183                  else{ OLED_SDAL; }
   \                     ??OLED_Write_Byte_3:
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable13_8  ;; 0x400ff048
   \   00000040   0x6809             LDR      R1,[R1, #+0]
   \   00000042   0xF051 0x0102      ORRS     R1,R1,#0x2
   \   00000046   0x.... 0x....      LDR.W    R3,??DataTable13_8  ;; 0x400ff048
   \   0000004A   0x6019             STR      R1,[R3, #+0]
    184                  OLED_SCLH;
   \                     ??OLED_Write_Byte_4:
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable13_7  ;; 0x400ff044
   \   00000050   0x6809             LDR      R1,[R1, #+0]
   \   00000052   0xF451 0x1100      ORRS     R1,R1,#0x200000
   \   00000056   0x.... 0x....      LDR.W    R3,??DataTable13_7  ;; 0x400ff044
   \   0000005A   0x6019             STR      R1,[R3, #+0]
    185                  asm("nop");
   \   0000005C   0xBF00             nop              
    186                  OLED_SCLL;    
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable13_8  ;; 0x400ff048
   \   00000062   0x6809             LDR      R1,[R1, #+0]
   \   00000064   0xF451 0x1100      ORRS     R1,R1,#0x200000
   \   00000068   0x.... 0x....      LDR.W    R3,??DataTable13_8  ;; 0x400ff048
   \   0000006C   0x6019             STR      R1,[R3, #+0]
    187                  Dat <<= 1;    
   \   0000006E   0x0040             LSLS     R0,R0,#+1
   \                     ??OLED_Write_Byte_2:
   \   00000070   0x0011             MOVS     R1,R2
   \   00000072   0x1E4A             SUBS     R2,R1,#+1
   \   00000074   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000076   0x2900             CMP      R1,#+0
   \   00000078   0xD00A             BEQ.N    ??OLED_Write_Byte_5
   \   0000007A   0x0601             LSLS     R1,R0,#+24
   \   0000007C   0xD5DE             BPL.N    ??OLED_Write_Byte_3
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable13_7  ;; 0x400ff044
   \   00000082   0x6809             LDR      R1,[R1, #+0]
   \   00000084   0xF051 0x0102      ORRS     R1,R1,#0x2
   \   00000088   0x.... 0x....      LDR.W    R3,??DataTable13_7  ;; 0x400ff044
   \   0000008C   0x6019             STR      R1,[R3, #+0]
   \   0000008E   0xE7DD             B.N      ??OLED_Write_Byte_4
    188              }
    189          }
   \                     ??OLED_Write_Byte_5:
   \   00000090   0x4770             BX       LR               ;; return
    190          
    191          //¸üÐÂÏÔ´æµ½LCD		 

   \                                 In section .text, align 2, keep-with-next
    192          void OLED_Refresh_Gram(void)
    193          {
   \                     OLED_Refresh_Gram:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    194              INT8U i,n;		    
    195              for(i=0;i<8;i++)  
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE010             B.N      ??OLED_Refresh_Gram_0
    196              {  
    197                  OLED_Write_Byte(0xB0+i,OLED_CMD);    //ÉèÖÃÒ³µØÖ·£¨0~7£©
    198                  OLED_Write_Byte(0x00,OLED_CMD);      //ÉèÖÃÏÔÊ¾Î»ÖÃ-ÁÐµÍµØÖ·
    199                  OLED_Write_Byte(0x10,OLED_CMD);      //ÉèÖÃÏÔÊ¾Î»ÖÃ-ÁÐ¸ßµØÖ·   
    200                  for(n=0;n<132;n++)
    201                    OLED_Write_Byte(ptrDisplay_GRAM[n][i],OLED_DATA);
   \                     ??OLED_Refresh_Gram_1:
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x2084             MOVS     R0,#+132
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable13_5
   \   00000012   0x6812             LDR      R2,[R2, #+0]
   \   00000014   0xFB00 0x2005      MLA      R0,R0,R5,R2
   \   00000018   0x5C20             LDRB     R0,[R4, R0]
   \   0000001A   0x.... 0x....      BL       OLED_Write_Byte
   \   0000001E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??OLED_Refresh_Gram_2:
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x2D84             CMP      R5,#+132
   \   00000024   0xD3EF             BCC.N    ??OLED_Refresh_Gram_1
   \   00000026   0x1C64             ADDS     R4,R4,#+1
   \                     ??OLED_Refresh_Gram_0:
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0x2C08             CMP      R4,#+8
   \   0000002C   0xD20F             BCS.N    ??OLED_Refresh_Gram_3
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0xF1B4 0x0050      SUBS     R0,R4,#+80
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x.... 0x....      BL       OLED_Write_Byte
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x.... 0x....      BL       OLED_Write_Byte
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x2010             MOVS     R0,#+16
   \   00000046   0x.... 0x....      BL       OLED_Write_Byte
   \   0000004A   0x2500             MOVS     R5,#+0
   \   0000004C   0xE7E8             B.N      ??OLED_Refresh_Gram_2
    202              }   
    203          }
   \                     ??OLED_Refresh_Gram_3:
   \   0000004E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    204          //¸üÐÂÄ³Ò»ÐÐÏÔ´æµ½LCD		 

   \                                 In section .text, align 2, keep-with-next
    205          void OLED_Refresh_SeleteGram(INT8U id)
    206          {
   \                     OLED_Refresh_SeleteGram:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    207            OLED_Write_Byte(0xB0+id,OLED_CMD);    //ÉèÖÃÒ³µØÖ·£¨0~7£©
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0xF1B4 0x0050      SUBS     R0,R4,#+80
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       OLED_Write_Byte
    208            OLED_Write_Byte(0x00,OLED_CMD);      //ÉèÖÃÏÔÊ¾Î»ÖÃ-ÁÐµÍµØÖ·
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       OLED_Write_Byte
    209            OLED_Write_Byte(0x10,OLED_CMD);      //ÉèÖÃÏÔÊ¾Î»ÖÃ-ÁÐ¸ßµØÖ·   
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x2010             MOVS     R0,#+16
   \   0000001C   0x.... 0x....      BL       OLED_Write_Byte
    210            for(INT8U n=0;n<132;n++)
   \   00000020   0x2500             MOVS     R5,#+0
   \   00000022   0xE00C             B.N      ??OLED_Refresh_SeleteGram_0
    211              OLED_Write_Byte(ptrDisplay_GRAM[n][id],OLED_DATA); 
   \                     ??OLED_Refresh_SeleteGram_1:
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2084             MOVS     R0,#+132
   \   0000002C   0x.... 0x....      LDR.W    R2,??DataTable13_5
   \   00000030   0x6812             LDR      R2,[R2, #+0]
   \   00000032   0xFB00 0x2005      MLA      R0,R0,R5,R2
   \   00000036   0x5C20             LDRB     R0,[R4, R0]
   \   00000038   0x.... 0x....      BL       OLED_Write_Byte
   \   0000003C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??OLED_Refresh_SeleteGram_0:
   \   0000003E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000040   0x2D84             CMP      R5,#+132
   \   00000042   0xD3EF             BCC.N    ??OLED_Refresh_SeleteGram_1
    212          }
   \   00000044   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    213          /*****************************************************************************
    214           º¯ Êý Ãû  : OLED_SetPos
    215           ¹¦ÄÜÃèÊö  : ÉèÖÃÏÔÊ¾×ø±ê
    216           ÊäÈë²ÎÊý  : INT8U X  
    217                       INT8U Y  
    218           Êä³ö²ÎÊý  : NONE
    219           ·µ »Ø Öµ  : NONE
    220          *****************************************************************************/
    221          //0xb0+0~7±íÊ¾Ò³0~7
    222          //0x00+0~16±íÊ¾½«128ÁÐ·Ö³É16×éÆäµØÖ·ÔÚÄ³×éÖÐµÄµÚ¼¸ÁÐ
    223          //0x10+0~16±íÊ¾½«128ÁÐ·Ö³É16×éÆäµØÖ·ËùÔÚµÚ¼¸×é
    224          static void OLED_SetPos(INT8U X, INT8U Y)
    225          { 
    226              OLED_Write_Byte(0xB0+Y,OLED_CMD);
    227              OLED_Write_Byte(((X&0xF0)>>4)|0x10,OLED_CMD);
    228              OLED_Write_Byte((X&0x0F)|0x00,OLED_CMD); 
    229          } 

   \                                 In section .text, align 4, keep-with-next
    230          static void OLED_RST(void)
    231          {
    232              OLED_SCLH;      
   \                     OLED_RST:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable13_7  ;; 0x400ff044
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable13_7  ;; 0x400ff044
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    233              OLED_RSTL;
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable13_8  ;; 0x400ff048
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable13_8  ;; 0x400ff048
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    234              //´ÓÉÏµçµ½ÏÂÃæ¿ªÊ¼³õÊ¼»¯ÒªÓÐ×ã¹»µÄÊ±¼ä£¬¼´µÈ´ýIC¸´Î»Íê±Ï      
    235              for(INT16U i=0;i<1000;++i){ asm("nop"); } 
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE001             B.N      ??OLED_RST_0
   \                     ??OLED_RST_1:
   \   00000024   0xBF00             nop              
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \                     ??OLED_RST_0:
   \   00000028   0xF44F 0x717A      MOV      R1,#+1000
   \   0000002C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002E   0x4288             CMP      R0,R1
   \   00000030   0xD3F8             BCC.N    ??OLED_RST_1
    236              OLED_RSTH;
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable13_7  ;; 0x400ff044
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable13_7  ;; 0x400ff044
   \   00000040   0x6008             STR      R0,[R1, #+0]
    237          }
   \   00000042   0x4770             BX       LR               ;; return
    238          
    239          /*****************************************************************************
    240           º¯ Êý Ãû  : OLED_ChipInit
    241           ¹¦ÄÜÃèÊö  : OLED³õÊ¼»¯
    242           ÊäÈë²ÎÊý  : void  
    243           Êä³ö²ÎÊý  : NONE
    244           ·µ »Ø Öµ  : NONE
    245          *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    246          static void OLED_ChipInit(void)        
    247          {
   \                     OLED_ChipInit:
   \   00000000   0xB580             PUSH     {R7,LR}
    248              OLED_Write_Byte(0xAE,OLED_CMD); //¹Ø±ÕÏÔÊ¾
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x20AE             MOVS     R0,#+174
   \   00000006   0x.... 0x....      BL       OLED_Write_Byte
    249              OLED_Write_Byte(0xD5,OLED_CMD); //ÉèÖÃÊ±ÖÓ·ÖÆµÒò×Ó,Õðµ´ÆµÂÊ
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x20D5             MOVS     R0,#+213
   \   0000000E   0x.... 0x....      BL       OLED_Write_Byte
    250              OLED_Write_Byte(0x80,OLED_CMD); //[3:0],·ÖÆµÒò×Ó;[7:4],Õðµ´ÆµÂÊ
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x2080             MOVS     R0,#+128
   \   00000016   0x.... 0x....      BL       OLED_Write_Byte
    251              OLED_Write_Byte(0xA8,OLED_CMD); //ÉèÖÃÇý¶¯Â·Êý
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x20A8             MOVS     R0,#+168
   \   0000001E   0x.... 0x....      BL       OLED_Write_Byte
    252              OLED_Write_Byte(0x3F,OLED_CMD); //Ä¬ÈÏ0x3F(1-64)63
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x203F             MOVS     R0,#+63
   \   00000026   0x.... 0x....      BL       OLED_Write_Byte
    253              OLED_Write_Byte(0xD3,OLED_CMD); //ÉèÖÃÏÔÊ¾Æ«ÒÆ(¼´ÔÚÉè¶¨µÄ»ù´¡ÉÏ×Ô¶¯¼ÓÉÏÒ»¶¨µÄÆ«ÒÆÁ¿,×¨Ö¸ÐÐµØÖ·µÄÆ«ÒÆ£¬¶ÔÁÐµØÖ·ÎÞÓ°Ïì)
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x20D3             MOVS     R0,#+211
   \   0000002E   0x.... 0x....      BL       OLED_Write_Byte
    254              OLED_Write_Byte(0x00,OLED_CMD); //Ä¬ÈÏÎª0
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      BL       OLED_Write_Byte
    255              OLED_Write_Byte(0x40,OLED_CMD); //ÉèÖÃÏÔÊ¾¿ªÊ¼ÐÐ[5:0],ÐÐÊý.
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x2040             MOVS     R0,#+64
   \   0000003E   0x.... 0x....      BL       OLED_Write_Byte
    256              OLED_Write_Byte(0x8D,OLED_CMD); //µçºÉ±ÃÉèÖÃ
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x208D             MOVS     R0,#+141
   \   00000046   0x.... 0x....      BL       OLED_Write_Byte
    257              OLED_Write_Byte(0x14,OLED_CMD); //bit2,¿ªÆô/¹Ø±Õ 
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x2014             MOVS     R0,#+20
   \   0000004E   0x.... 0x....      BL       OLED_Write_Byte
    258              OLED_Write_Byte(0x20,OLED_CMD); //ÉèÖÃÄÚ´æµØÖ·Ä£Ê½
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x2020             MOVS     R0,#+32
   \   00000056   0x.... 0x....      BL       OLED_Write_Byte
    259              OLED_Write_Byte(0x02,OLED_CMD); //[1:0],00,ÁÐµØÖ·Ä£Ê½;01,ÐÐµØÖ·Ä£Ê½;10,Ò³µØÖ·Ä£Ê½;Ä¬ÈÏ10; 
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x.... 0x....      BL       OLED_Write_Byte
    260              OLED_Write_Byte(0xA0,OLED_CMD); //¶ÎÖØ¶¨ÒåÉèÖÃbit0:0,0->0;1,0->127;
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0x20A0             MOVS     R0,#+160
   \   00000066   0x.... 0x....      BL       OLED_Write_Byte
    261              //A1ÁÐÉ¨ÃèË³Ðò¾ùÎª×Ô×óÏòÓÒ£¬A0ÁÐÉ¨ÃèË³Ðò¾ùÎª×ÔÓÒÏò×ó	
    262              //COMÉ¨Ãè·½Ïò£º0xC0:COM0-COM63 ; 0xC8:COM63-COM0
    263              OLED_Write_Byte(0xC0,OLED_CMD);// ÉèÖÃCOMÉ¨Ãè·½Ïò;bit3:0,ÆÕÍ¨Ä£Ê½;1,ÖØ¶¨ÒåÄ£Ê½ COM[N-1]->COM0;N:Çý¶¯Â·Êý
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x20C0             MOVS     R0,#+192
   \   0000006E   0x.... 0x....      BL       OLED_Write_Byte
    264              OLED_Write_Byte(0xDA,OLED_CMD);//ÉèÖÃCOMÓ²¼þÒý½ÅÅäÖÃ
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0x20DA             MOVS     R0,#+218
   \   00000076   0x.... 0x....      BL       OLED_Write_Byte
    265              OLED_Write_Byte(0x12,OLED_CMD); //[5:4]ÅäÖÃ
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x2012             MOVS     R0,#+18
   \   0000007E   0x.... 0x....      BL       OLED_Write_Byte
    266              //µÚ4Î»0¾ö¶¨ÊÇÁ¬ÐøÉ¨ÃèCOM¶Ë(0,1...32...63)»¹ÊÇ1½»ÌæÉ¨ÃèCOM¶Ë(0,32,1,33....31,63)
    267              //×¢ÒâÊµ¼ÊÊä³öË³ÐòÎª0£¬32£¬1£¬33.....31£¬63£¬Òò´ËÁ¬ÐøÉ¨Ãè¶ÔÓ¦½»ÌæÏÔÊ¾£¬½»ÌæÉ¨Ãè¶ÔÓ¦Á¬ÐøÏÔÊ¾
    268              //µÚÎåÎ»¾ö¶¨ÊÇ·ñ¶ÔCOM0-COM31ÓëCOM32-COM63½øÐÐÖØÓ³Éä£¬1ÎªÔÊÐí£¬0Îª½ûÖ¹
    269          
    270              OLED_Write_Byte(0x81,OLED_CMD); //¶Ô±È¶ÈÉèÖÃ
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x2081             MOVS     R0,#+129
   \   00000086   0x.... 0x....      BL       OLED_Write_Byte
    271              OLED_Write_Byte(0xEF,OLED_CMD); //1~255,Ä¬ÈÏ0X7F(ÁÁ¶ÈÉèÖÃ£¬Ô½´óÔ½ÁÁ)
   \   0000008A   0x2100             MOVS     R1,#+0
   \   0000008C   0x20EF             MOVS     R0,#+239
   \   0000008E   0x.... 0x....      BL       OLED_Write_Byte
    272              OLED_Write_Byte(0xD9,OLED_CMD); //ÉèÖÃÔ¤³äµçÖÜÆÚ
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0x20D9             MOVS     R0,#+217
   \   00000096   0x.... 0x....      BL       OLED_Write_Byte
    273              OLED_Write_Byte(0xF1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
   \   0000009A   0x2100             MOVS     R1,#+0
   \   0000009C   0x20F1             MOVS     R0,#+241
   \   0000009E   0x.... 0x....      BL       OLED_Write_Byte
    274              OLED_Write_Byte(0xDB,OLED_CMD); //ÉèÖÃVCOMHµçÑ¹±¶ÂÊ
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0x20DB             MOVS     R0,#+219
   \   000000A6   0x.... 0x....      BL       OLED_Write_Byte
    275              OLED_Write_Byte(0x30,OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
   \   000000AA   0x2100             MOVS     R1,#+0
   \   000000AC   0x2030             MOVS     R0,#+48
   \   000000AE   0x.... 0x....      BL       OLED_Write_Byte
    276              OLED_Write_Byte(0xA4,OLED_CMD); //È«¾ÖÏÔÊ¾¿ªÆôbit0:1,¿ªÆô;0,¹Ø±Õ;(°×ÆÁ/ºÚÆÁ )
   \   000000B2   0x2100             MOVS     R1,#+0
   \   000000B4   0x20A4             MOVS     R0,#+164
   \   000000B6   0x.... 0x....      BL       OLED_Write_Byte
    277              OLED_Write_Byte(0xA6,OLED_CMD); //ÉèÖÃÏÔÊ¾·½Ê½;bit0:1,·´ÏàÏÔÊ¾;0,Õý³£ÏÔÊ¾
   \   000000BA   0x2100             MOVS     R1,#+0
   \   000000BC   0x20A6             MOVS     R0,#+166
   \   000000BE   0x.... 0x....      BL       OLED_Write_Byte
    278              OLED_Write_Byte(0xAF,OLED_CMD); //¿ªÆôÏÔÊ¾	
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x20AF             MOVS     R0,#+175
   \   000000C6   0x.... 0x....      BL       OLED_Write_Byte
    279          } 
   \   000000CA   0xBD01             POP      {R0,PC}          ;; return
    280          
    281          //¿ªÆôOLEDÏÔÊ¾    

   \                                 In section .text, align 2, keep-with-next
    282          static void OLED_Display_On(void)
    283          {
   \                     OLED_Display_On:
   \   00000000   0xB580             PUSH     {R7,LR}
    284                OLED_Write_Byte(0x8D,OLED_CMD);  //ÉèÖÃµçºÉ±ÃÃüÁî
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x208D             MOVS     R0,#+141
   \   00000006   0x.... 0x....      BL       OLED_Write_Byte
    285                OLED_Write_Byte(0x14,OLED_CMD);  //¿ªµçºÉ±Ã
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2014             MOVS     R0,#+20
   \   0000000E   0x.... 0x....      BL       OLED_Write_Byte
    286                OLED_Write_Byte(0xAF,OLED_CMD);  //¿ªÏÔÊ¾
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x20AF             MOVS     R0,#+175
   \   00000016   0x.... 0x....      BL       OLED_Write_Byte
    287          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
    288          //¹Ø±ÕOLEDÏÔÊ¾     

   \                                 In section .text, align 2, keep-with-next
    289          static void OLED_Display_Off(void)
    290          {
   \                     OLED_Display_Off:
   \   00000000   0xB580             PUSH     {R7,LR}
    291                OLED_Write_Byte(0x8D,OLED_CMD);  //ÉèÖÃµçºÉ±ÃÃüÁî
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x208D             MOVS     R0,#+141
   \   00000006   0x.... 0x....      BL       OLED_Write_Byte
    292                OLED_Write_Byte(0x10,OLED_CMD);  //¹ØµçºÉ±Ã
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2010             MOVS     R0,#+16
   \   0000000E   0x.... 0x....      BL       OLED_Write_Byte
    293                OLED_Write_Byte(0xAE,OLED_CMD);  //¹ØÏÔÊ¾
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x20AE             MOVS     R0,#+174
   \   00000016   0x.... 0x....      BL       OLED_Write_Byte
    294          }	
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
    295          	   			 
    296          //ÇåÆÁº¯Êý,ÇåÍêÆÁ,Õû¸öÆÁÄ»ÊÇºÚÉ«µÄ£¬ºÍÃ»µãÁÁÒ»Ñù	  

   \                                 In section .text, align 2, keep-with-next
    297          void OLED_Clear(void)  
    298          {  
    299            INT8U i,n;  
    300            for(i=0;i<8;++i)
   \                     OLED_Clear:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE00D             B.N      ??OLED_Clear_0
    301            {
    302              for(n=0;n<132;++n)
    303              {
    304                ptrDisplay_GRAM[n][i]=0x00;
   \                     ??OLED_Clear_1:
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0x2284             MOVS     R2,#+132
   \   0000000A   0x....             LDR.N    R3,??DataTable13_5
   \   0000000C   0x681B             LDR      R3,[R3, #+0]
   \   0000000E   0xFB02 0x3201      MLA      R2,R2,R1,R3
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0x5483             STRB     R3,[R0, R2]
    305              }
   \   00000016   0x1C49             ADDS     R1,R1,#+1
   \                     ??OLED_Clear_2:
   \   00000018   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   0x2984             CMP      R1,#+132
   \   0000001C   0xD3F2             BCC.N    ??OLED_Clear_1
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \                     ??OLED_Clear_0:
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x2808             CMP      R0,#+8
   \   00000024   0xD201             BCS.N    ??OLED_Clear_3
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0xE7F6             B.N      ??OLED_Clear_2
    306            }
    307          }
   \                     ??OLED_Clear_3:
   \   0000002A   0x4770             BX       LR               ;; return
    308          
    309          //ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸ö×Ö·û,°üÀ¨²¿·Ö×Ö·û
    310          //x:0~127
    311          //y:0~63
    312          //mode:0,·´°×ÏÔÊ¾;1,Õý³£ÏÔÊ¾				 

   \                                 In section .text, align 2, keep-with-next
    313          static void OLED_Write_Char(INT8U x,INT8U y,INT8U chr,INT8U mode)
    314          {      			      			    
   \                     OLED_Write_Char:
   \   00000000   0xB4F0             PUSH     {R4-R7}
    315              INT8U t;
    316              chr=chr-' ';//µÃµ½Æ«ÒÆºóµÄÖµ			   
   \   00000002   0x3A20             SUBS     R2,R2,#+32
    317              for(t=0;t<6;t++)//°´ÐÐÐ´Èë£¬Ò»¹²Ð´sizeÐÐ
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0xE018             B.N      ??OLED_Write_Char_0
    318              {   
    319                  if(mode) 
    320                  {
    321                      ptrDisplay_GRAM[x+t][y/8]=ASCII_0608[chr][t];  //µ÷ÓÃ0608×ÖÌå
    322                  }
    323                  else //·´°×ÏÔÊ¾
    324                  {
    325                      ptrDisplay_GRAM[x+t][y/8]=~ASCII_0608[chr][t];  //µ÷ÓÃ0608×ÖÌå
   \                     ??OLED_Write_Char_1:
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x2508             MOVS     R5,#+8
   \   0000000C   0xFB91 0xF5F5      SDIV     R5,R1,R5
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0xFA54 0xF680      UXTAB    R6,R4,R0
   \   00000016   0x2784             MOVS     R7,#+132
   \   00000018   0x.... 0x....      LDR.W    R12,??DataTable13_5
   \   0000001C   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   00000020   0xFB07 0xC606      MLA      R6,R7,R6,R12
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000028   0x2706             MOVS     R7,#+6
   \   0000002A   0x.... 0x....      LDR.W    R12,??DataTable13_9
   \   0000002E   0xFB07 0xC702      MLA      R7,R7,R2,R12
   \   00000032   0x5DE7             LDRB     R7,[R4, R7]
   \   00000034   0x43FF             MVNS     R7,R7
   \   00000036   0x55AF             STRB     R7,[R5, R6]
    326                  }	
   \                     ??OLED_Write_Char_2:
   \   00000038   0x1C64             ADDS     R4,R4,#+1
   \                     ??OLED_Write_Char_0:
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x2C06             CMP      R4,#+6
   \   0000003E   0xD21A             BCS.N    ??OLED_Write_Char_3
   \   00000040   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000042   0x2B00             CMP      R3,#+0
   \   00000044   0xD0E0             BEQ.N    ??OLED_Write_Char_1
   \   00000046   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000048   0x2508             MOVS     R5,#+8
   \   0000004A   0xFB91 0xF5F5      SDIV     R5,R1,R5
   \   0000004E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000050   0xFA54 0xF680      UXTAB    R6,R4,R0
   \   00000054   0x2784             MOVS     R7,#+132
   \   00000056   0x.... 0x....      LDR.W    R12,??DataTable13_5
   \   0000005A   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   0000005E   0xFB07 0xC606      MLA      R6,R7,R6,R12
   \   00000062   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000064   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000066   0x2706             MOVS     R7,#+6
   \   00000068   0x.... 0x....      LDR.W    R12,??DataTable13_9
   \   0000006C   0xFB07 0xC702      MLA      R7,R7,R2,R12
   \   00000070   0x5DE7             LDRB     R7,[R4, R7]
   \   00000072   0x55AF             STRB     R7,[R5, R6]
   \   00000074   0xE7E0             B.N      ??OLED_Write_Char_2
    327              }  
    328          }
   \                     ??OLED_Write_Char_3:
   \   00000076   0xBCF0             POP      {R4-R7}
   \   00000078   0x4770             BX       LR               ;; return
    329          

   \                                 In section .text, align 2, keep-with-next
    330          INT8U OLED_SetLowPower(void)
    331          {
   \                     OLED_SetLowPower:
   \   00000000   0xB580             PUSH     {R7,LR}
    332            if(0 == OLED_IsLowPwr)
   \   00000002   0x....             LDR.N    R0,??DataTable13_10
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD106             BNE.N    ??OLED_SetLowPower_0
    333            {
    334              OLED_Display_Off();
   \   0000000A   0x.... 0x....      BL       OLED_Display_Off
    335              OLED_IsLowPwr = 1;
   \   0000000E   0x....             LDR.N    R0,??DataTable13_10
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x7001             STRB     R1,[R0, #+0]
    336              return KOS_OK;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xE000             B.N      ??OLED_SetLowPower_1
    337            }
    338            else
    339            {
    340              return KOS_ERR;
   \                     ??OLED_SetLowPower_0:
   \   00000018   0x2001             MOVS     R0,#+1
   \                     ??OLED_SetLowPower_1:
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return
    341            }
    342          }
    343          

   \                                 In section .text, align 2, keep-with-next
    344          INT8U OLED_SetNormalPower(void)
    345          {
   \                     OLED_SetNormalPower:
   \   00000000   0xB580             PUSH     {R7,LR}
    346            if(1 == OLED_IsLowPwr)
   \   00000002   0x....             LDR.N    R0,??DataTable13_10
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD106             BNE.N    ??OLED_SetNormalPower_0
    347            {
    348              OLED_Display_On();
   \   0000000A   0x.... 0x....      BL       OLED_Display_On
    349              OLED_IsLowPwr = 0;
   \   0000000E   0x....             LDR.N    R0,??DataTable13_10
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x7001             STRB     R1,[R0, #+0]
    350              return KOS_OK;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xE000             B.N      ??OLED_SetNormalPower_1
    351            }
    352            else
    353            {
    354              return KOS_ERR;
   \                     ??OLED_SetNormalPower_0:
   \   00000018   0x2001             MOVS     R0,#+1
   \                     ??OLED_SetNormalPower_1:
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return
    355            }
    356          }
    357          

   \                                 In section .text, align 2, keep-with-next
    358          static void OLED_StrCpy(char * des,const char * src)
    359          {
   \                     OLED_StrCpy:
   \   00000000   0xE003             B.N      ??OLED_StrCpy_0
    360            while(*src)
    361            {
    362              *des = *src;
   \                     ??OLED_StrCpy_1:
   \   00000002   0x780A             LDRB     R2,[R1, #+0]
   \   00000004   0x7002             STRB     R2,[R0, #+0]
    363              src++;
   \   00000006   0x1C49             ADDS     R1,R1,#+1
    364              des++;
   \   00000008   0x1C40             ADDS     R0,R0,#+1
    365            }
   \                     ??OLED_StrCpy_0:
   \   0000000A   0x780A             LDRB     R2,[R1, #+0]
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD1F8             BNE.N    ??OLED_StrCpy_1
    366            *des = *src;
   \   00000010   0x7809             LDRB     R1,[R1, #+0]
   \   00000012   0x7001             STRB     R1,[R0, #+0]
    367          }
   \   00000014   0x4770             BX       LR               ;; return
    368          

   \                                 In section .text, align 2, keep-with-next
    369          static INT8U OLED_DataShowInit()
    370          {
   \                     OLED_DataShowInit:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    371            INT8U err_code = KOS_OK;
   \   00000002   0x2400             MOVS     R4,#+0
    372            for(INT8U index = 0;index < PARAM_SHOW_LENGTH;++index)
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE034             B.N      ??OLED_DataShowInit_0
    373            {
    374              stDataMap[index].lpstr = NULL;
    375              stDataMap[index].lpstr = (char *) malloc (30 * sizeof(char));
    376              if(NULL == stDataMap[index].lpstr){ err_code += KOS_ERR; }
    377              else
    378              {
    379                OLED_StrCpy(stDataMap[index].lpstr,(char *)DataMap[index][0]);
   \                     ??OLED_DataShowInit_1:
   \   00000008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   0x200C             MOVS     R0,#+12
   \   0000000C   0x....             LDR.N    R1,??DataTable13_11
   \   0000000E   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000016   0x2018             MOVS     R0,#+24
   \   00000018   0x....             LDR.N    R2,??DataTable13_6
   \   0000001A   0xFB00 0x2005      MLA      R0,R0,R5,R2
   \   0000001E   0x6880             LDR      R0,[R0, #+8]
   \   00000020   0x.... 0x....      BL       OLED_StrCpy
    380                stDataMap[index].pData = DataMap[index][1];
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x2018             MOVS     R0,#+24
   \   00000028   0x....             LDR.N    R1,??DataTable13_6
   \   0000002A   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x210C             MOVS     R1,#+12
   \   00000032   0x....             LDR.N    R2,??DataTable13_11
   \   00000034   0xFB01 0x2105      MLA      R1,R1,R5,R2
   \   00000038   0x6849             LDR      R1,[R1, #+4]
   \   0000003A   0x60C1             STR      R1,[R0, #+12]
    381                stDataMap[index].typeID = (DataType)DataMap[index][2];
   \   0000003C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0x2018             MOVS     R0,#+24
   \   00000040   0x....             LDR.N    R1,??DataTable13_6
   \   00000042   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   00000046   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000048   0x210C             MOVS     R1,#+12
   \   0000004A   0x....             LDR.N    R2,??DataTable13_11
   \   0000004C   0xFB01 0x2105      MLA      R1,R1,R5,R2
   \   00000050   0x6889             LDR      R1,[R1, #+8]
   \   00000052   0x7441             STRB     R1,[R0, #+17]
    382                stDataMap[index].orgLength = strlen(DataMap[index][0]);
   \   00000054   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000056   0x200C             MOVS     R0,#+12
   \   00000058   0x....             LDR.N    R1,??DataTable13_11
   \   0000005A   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x.... 0x....      BL       strlen
   \   00000064   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000066   0x2118             MOVS     R1,#+24
   \   00000068   0x....             LDR.N    R2,??DataTable13_6
   \   0000006A   0xFB01 0x2105      MLA      R1,R1,R5,R2
   \   0000006E   0x7408             STRB     R0,[R1, #+16]
    383                err_code += KOS_OK;
    384              }
   \                     ??OLED_DataShowInit_2:
   \   00000070   0x1C6D             ADDS     R5,R5,#+1
   \                     ??OLED_DataShowInit_0:
   \   00000072   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000074   0x2D05             CMP      R5,#+5
   \   00000076   0xD219             BCS.N    ??OLED_DataShowInit_3
   \   00000078   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000007A   0x2018             MOVS     R0,#+24
   \   0000007C   0x....             LDR.N    R1,??DataTable13_6
   \   0000007E   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x6081             STR      R1,[R0, #+8]
   \   00000086   0x201E             MOVS     R0,#+30
   \   00000088   0x.... 0x....      BL       malloc
   \   0000008C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000008E   0x2118             MOVS     R1,#+24
   \   00000090   0x....             LDR.N    R2,??DataTable13_6
   \   00000092   0xFB01 0x2105      MLA      R1,R1,R5,R2
   \   00000096   0x6088             STR      R0,[R1, #+8]
   \   00000098   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009A   0x2018             MOVS     R0,#+24
   \   0000009C   0x....             LDR.N    R1,??DataTable13_6
   \   0000009E   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   000000A2   0x6880             LDR      R0,[R0, #+8]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD1AF             BNE.N    ??OLED_DataShowInit_1
   \   000000A8   0x1C64             ADDS     R4,R4,#+1
   \   000000AA   0xE7E1             B.N      ??OLED_DataShowInit_2
    385            }
    386            return err_code;
   \                     ??OLED_DataShowInit_3:
   \   000000AC   0x0020             MOVS     R0,R4
   \   000000AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B0   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    387          }
    388          

   \                                 In section .text, align 2, keep-with-next
    389          static void Show_Param(INT8U id,ParamSt *param){
   \                     Show_Param:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    390            INT8U index = 0;
   \   00000008   0x2600             MOVS     R6,#+0
    391            INT8U cnt = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
    392            char *src = param->lpstr;
   \   0000000C   0xF8D5 0x8008      LDR      R8,[R5, #+8]
    393            gTypeAdapter(param);
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0x.... 0x....      BL       gTypeAdapter
   \   00000016   0xE00D             B.N      ??Show_Param_0
    394            for(;cnt < param->orgLength;++cnt)
    395            {
    396              OLED_Write_Char(index,id*8,*src,0);
   \                     ??Show_Param_1:
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0xF898 0x2000      LDRB     R2,[R8, #+0]
   \   0000001E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000020   0x00E1             LSLS     R1,R4,#+3
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0x0030             MOVS     R0,R6
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x.... 0x....      BL       OLED_Write_Char
    397              index+=6;
   \   0000002C   0x1DB6             ADDS     R6,R6,#+6
    398              src++;
   \   0000002E   0xF118 0x0801      ADDS     R8,R8,#+1
    399            }
   \   00000032   0x1C7F             ADDS     R7,R7,#+1
   \                     ??Show_Param_0:
   \   00000034   0x7C28             LDRB     R0,[R5, #+16]
   \   00000036   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000038   0x4287             CMP      R7,R0
   \   0000003A   0xD3ED             BCC.N    ??Show_Param_1
    400            while(*src){
   \                     ??Show_Param_2:
   \   0000003C   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD017             BEQ.N    ??Show_Param_3
    401              OLED_Write_Char(index,id*8,*src,1);
   \   00000044   0x2301             MOVS     R3,#+1
   \   00000046   0xF898 0x2000      LDRB     R2,[R8, #+0]
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0x00E1             LSLS     R1,R4,#+3
   \   0000004E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000050   0x0030             MOVS     R0,R6
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x.... 0x....      BL       OLED_Write_Char
    402              index+=6;
   \   00000058   0x1DB6             ADDS     R6,R6,#+6
    403              src++;
   \   0000005A   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000005E   0xE7ED             B.N      ??Show_Param_2
    404            }
    405            while(index<122){
    406              OLED_Write_Char(index,id*8,' ',1);
   \                     ??Show_Param_4:
   \   00000060   0x2301             MOVS     R3,#+1
   \   00000062   0x2220             MOVS     R2,#+32
   \   00000064   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000066   0x00E1             LSLS     R1,R4,#+3
   \   00000068   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006A   0x0030             MOVS     R0,R6
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x.... 0x....      BL       OLED_Write_Char
    407              index+=6;
   \   00000072   0x1DB6             ADDS     R6,R6,#+6
    408            }
   \                     ??Show_Param_3:
   \   00000074   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000076   0x2E7A             CMP      R6,#+122
   \   00000078   0xD3F2             BCC.N    ??Show_Param_4
    409            OLED_Refresh_SeleteGram(id);
   \   0000007A   0x0020             MOVS     R0,R4
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0x.... 0x....      BL       OLED_Refresh_SeleteGram
    410          }
   \   00000082   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    411          

   \                                 In section .text, align 2, keep-with-next
    412          void WriteTips(INT8U id,INT8U *pre,const char *str){
   \                     WriteTips:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    413            INT8U index=0;
   \   00000008   0x2700             MOVS     R7,#+0
   \   0000000A   0xE00A             B.N      ??WriteTips_0
    414            while(*pre){
    415              OLED_Write_Char(index,id*8,*pre,0);
   \                     ??WriteTips_1:
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x782A             LDRB     R2,[R5, #+0]
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x00E1             LSLS     R1,R4,#+3
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x0038             MOVS     R0,R7
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x.... 0x....      BL       OLED_Write_Char
    416              index+=6;
   \   0000001E   0x1DBF             ADDS     R7,R7,#+6
    417              pre++;
   \   00000020   0x1C6D             ADDS     R5,R5,#+1
    418            }
   \                     ??WriteTips_0:
   \   00000022   0x7828             LDRB     R0,[R5, #+0]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD1F1             BNE.N    ??WriteTips_1
    419            while(*str){
   \                     ??WriteTips_2:
   \   00000028   0x7830             LDRB     R0,[R6, #+0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD015             BEQ.N    ??WriteTips_3
    420              OLED_Write_Char(index,id*8,*str,0);
   \   0000002E   0x2300             MOVS     R3,#+0
   \   00000030   0x7832             LDRB     R2,[R6, #+0]
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0x00E1             LSLS     R1,R4,#+3
   \   00000036   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000038   0x0038             MOVS     R0,R7
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x.... 0x....      BL       OLED_Write_Char
    421              index+=6;
   \   00000040   0x1DBF             ADDS     R7,R7,#+6
    422              str++;
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \   00000044   0xE7F0             B.N      ??WriteTips_2
    423            }
    424            while(index<122){
    425              OLED_Write_Char(index,id*8,' ',1);
   \                     ??WriteTips_4:
   \   00000046   0x2301             MOVS     R3,#+1
   \   00000048   0x2220             MOVS     R2,#+32
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0x00E1             LSLS     R1,R4,#+3
   \   0000004E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000050   0x0038             MOVS     R0,R7
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x.... 0x....      BL       OLED_Write_Char
    426              index+=6;
   \   00000058   0x1DBF             ADDS     R7,R7,#+6
    427            }
   \                     ??WriteTips_3:
   \   0000005A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005C   0x2F7A             CMP      R7,#+122
   \   0000005E   0xD3F2             BCC.N    ??WriteTips_4
    428            OLED_Refresh_SeleteGram(id);
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x.... 0x....      BL       OLED_Refresh_SeleteGram
    429          }
   \   00000068   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    430          

   \                                 In section .text, align 2, keep-with-next
    431          void OLED_Proc(void)
    432          {
   \                     OLED_Proc:
   \   00000000   0xB510             PUSH     {R4,LR}
    433            for(INT8U index = 0;index < PARAM_SHOW_LENGTH;++index)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE009             B.N      ??OLED_Proc_0
    434            {
    435              Show_Param(index,&stDataMap[index]);
   \                     ??OLED_Proc_1:
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2018             MOVS     R0,#+24
   \   0000000A   0x....             LDR.N    R1,??DataTable13_6
   \   0000000C   0xFB00 0x1104      MLA      R1,R0,R4,R1
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       Show_Param
    436            }
   \   00000018   0x1C64             ADDS     R4,R4,#+1
   \                     ??OLED_Proc_0:
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2C05             CMP      R4,#+5
   \   0000001E   0xD3F2             BCC.N    ??OLED_Proc_1
    437          }
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    438          

   \                                 In section .text, align 2, keep-with-next
    439          INT8U OLED_Init(void)
    440          {
   \                     OLED_Init:
   \   00000000   0xB580             PUSH     {R7,LR}
    441            OLED_ReqGram();//Ê×ÏÈÉêÇëÒº¾§ÏÔ´æ
   \   00000002   0x.... 0x....      BL       OLED_ReqGram
    442            if(NULL == ptrDisplay_GRAM) return KOS_ERR;//ÄÚ´æ·ÖÅäÊ§°Ü£¬Òº¾§³õÊ¼»¯Ê§°Ü
   \   00000006   0x....             LDR.N    R0,??DataTable13_5
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD101             BNE.N    ??OLED_Init_0
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE012             B.N      ??OLED_Init_1
    443            OLED_IO_Init();
   \                     ??OLED_Init_0:
   \   00000012   0x.... 0x....      BL       OLED_IO_Init
    444            OLED_RST();
   \   00000016   0x.... 0x....      BL       OLED_RST
    445            OLED_ChipInit();
   \   0000001A   0x.... 0x....      BL       OLED_ChipInit
    446            OLED_Display_On();
   \   0000001E   0x.... 0x....      BL       OLED_Display_On
    447            OLED_Clear();
   \   00000022   0x.... 0x....      BL       OLED_Clear
    448            OLED_Refresh_Gram();
   \   00000026   0x.... 0x....      BL       OLED_Refresh_Gram
    449            if(KOS_OK != OLED_DataShowInit()) return KOS_ERR;
   \   0000002A   0x.... 0x....      BL       OLED_DataShowInit
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD001             BEQ.N    ??OLED_Init_2
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0xE000             B.N      ??OLED_Init_1
    450            else return KOS_OK;
   \                     ??OLED_Init_2:
   \   00000036   0x2000             MOVS     R0,#+0
   \                     ??OLED_Init_1:
   \   00000038   0xBD02             POP      {R1,PC}          ;; return
    451          }
    452          

   \                                 In section .text, align 2, keep-with-next
    453          void OLED_Close(void)
    454          {
   \                     OLED_Close:
   \   00000000   0xB580             PUSH     {R7,LR}
    455            OLED_Clear();
   \   00000002   0x.... 0x....      BL       OLED_Clear
    456            OLED_Refresh_Gram();
   \   00000006   0x.... 0x....      BL       OLED_Refresh_Gram
    457            OLED_Display_Off();
   \   0000000A   0x.... 0x....      BL       OLED_Display_Off
    458            OLED_FreeRam();
   \   0000000E   0x.... 0x....      BL       OLED_FreeRam
    459          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x4004A054         DC32     0x4004a054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x4004A004         DC32     0x4004a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x4004A00C         DC32     0x4004a00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x4004A028         DC32     0x4004a028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x400FF054         DC32     0x400ff054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0x........         DC32     ptrDisplay_GRAM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x........         DC32     stDataMap

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0x400FF044         DC32     0x400ff044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   0x400FF048         DC32     0x400ff048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   0x........         DC32     ASCII_0608

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \   00000000   0x........         DC32     OLED_IsLowPwr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \   00000000   0x........         DC32     DataMap

   \                                 In section .rodata, align 4
   \                     `?<Constant "sdbus">`:
   \   00000000   0x73 0x64          DC8 "sdbus"
   \              0x62 0x75    
   \              0x73 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MAXspeed">`:
   \   00000000   0x4D 0x41          DC8 "MAXspeed"
   \              0x58 0x73    
   \              0x70 0x65    
   \              0x65 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  OLED_ChipInit
              8 -> OLED_Write_Byte
        0  OLED_Clear
        8  OLED_Close
              8 -> OLED_Clear
              8 -> OLED_Display_Off
              8 -> OLED_FreeRam
              8 -> OLED_Refresh_Gram
       16  OLED_DataShowInit
             16 -> OLED_StrCpy
             16 -> malloc
             16 -> strlen
        8  OLED_Display_Off
              8 -> OLED_Write_Byte
        8  OLED_Display_On
              8 -> OLED_Write_Byte
        8  OLED_FreeRam
              8 -> free
        0  OLED_IO_Init
        8  OLED_Init
              8 -> OLED_ChipInit
              8 -> OLED_Clear
              8 -> OLED_DataShowInit
              8 -> OLED_Display_On
              8 -> OLED_IO_Init
              8 -> OLED_RST
              8 -> OLED_Refresh_Gram
              8 -> OLED_ReqGram
        8  OLED_Proc
              8 -> Show_Param
        0  OLED_RST
       16  OLED_Refresh_Gram
             16 -> OLED_Write_Byte
       16  OLED_Refresh_SeleteGram
             16 -> OLED_Write_Byte
        8  OLED_ReqGram
              8 -> malloc
        8  OLED_SetLowPower
              8 -> OLED_Display_Off
        8  OLED_SetNormalPower
              8 -> OLED_Display_On
        0  OLED_StrCpy
        0  OLED_Write_Byte
       16  OLED_Write_Char
       24  Show_Param
             24 -> OLED_Refresh_SeleteGram
             24 -> OLED_Write_Char
             24 -> gTypeAdapter
       24  WriteTips
             24 -> OLED_Refresh_SeleteGram
             24 -> OLED_Write_Char


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "MAXspeed">
       8  ?<Constant "sdbus">
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_11
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
     576  ASCII_0608
      60  DataMap
     204  OLED_ChipInit
      44  OLED_Clear
      20  OLED_Close
     178  OLED_DataShowInit
      28  OLED_Display_Off
      28  OLED_Display_On
      96  OLED_FreeRam
     106  OLED_IO_Init
      58  OLED_Init
       1  OLED_IsLowPwr
       1  OLED_Mask
      34  OLED_Proc
      68  OLED_RST
      80  OLED_Refresh_Gram
      70  OLED_Refresh_SeleteGram
      16  OLED_ReqGram
      28  OLED_SetLowPower
      28  OLED_SetNormalPower
      22  OLED_StrCpy
     146  OLED_Write_Byte
     122  OLED_Write_Char
     134  Show_Param
     106  WriteTips
       4  ptrDisplay_GRAM
     120  stDataMap

 
   126 bytes in section .bss
   656 bytes in section .rodata
 1 664 bytes in section .text
 
 1 664 bytes of CODE  memory
   656 bytes of CONST memory
   126 bytes of DATA  memory

Errors: none
Warnings: 3

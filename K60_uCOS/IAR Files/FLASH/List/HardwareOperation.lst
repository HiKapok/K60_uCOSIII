###############################################################################
#                                                                             #
#                                                       03/Nov/2015  20:45:50 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\WangChangan\Desktop\K10小板定稿\HardwareInterfa #
#                    ce\HardwareOperation.c                                   #
#    Command line =  C:\Users\WangChangan\Desktop\K10小板定稿\HardwareInterfa #
#                    ce\HardwareOperation.c -D COMPILER_IAR -lCN              #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\FLASH\List\" -lB "C:\Users\WangChangan\Desktop\K10 #
#                    小板定稿\IAR Files\FLASH\List\" -o                       #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\FLASH\Obj\" --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Project_Headers\" -I                            #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\KinetisDrivers\" -I                             #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\ExtraFunction\" -I                              #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Hardware_Interface\" -I                         #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Make_Decision\" -I                              #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Math\" -I "C:\Users\WangChangan\Desktop\K10小板 #
#                    定稿\IAR Files\..\Original_Process\" -I                  #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Platform\" -I "C:\Users\WangChangan\Desktop\K10 #
#                    小板定稿\IAR Files\..\SD_System\" -I                     #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Source\" -I "C:\Users\WangChangan\Desktop\K10小 #
#                    板定稿\IAR Files\..\System_Init\" -Ol                    #
#    List file    =  C:\Users\WangChangan\Desktop\K10小板定稿\IAR             #
#                    Files\FLASH\List\HardwareOperation.lst                   #
#    Object file  =  C:\Users\WangChangan\Desktop\K10小板定稿\IAR             #
#                    Files\FLASH\Obj\HardwareOperation.o                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\WangChangan\Desktop\K10小板定稿\HardwareInterface\HardwareOperation.c
      1          #include "./HardwareOperation.h"
      2          #include "../Platform/Platform.h"
      3          

   \                                 In section .bss, align 4
      4          ptrKeyCallBackFunc ptrExtKeyProc;
   \                     ptrExtKeyProc:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
      5          INT16U Boma = 0;
   \                     Boma:
   \   00000000                      DS8 2
      6          /************************************************************************************************ 
      7          * ReadBomaValue
      8          * 读取拨码开关的设定(读取对应的二进制数)
      9          * 返回参数  拨码开关的当前值
     10          ************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     11          INT16U ReadBomaValue(void)
     12          {
   \                     ReadBomaValue:
   \   00000000   0xB081             SUB      SP,SP,#+4
     13            INT16U boma,boma_again;
     14            volatile INT16U i;
     15            
     16            do
     17            {    
     18              boma=READ_Boma();
   \                     ??ReadBomaValue_0:
   \   00000002   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff050
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF3C0 0x2040      UBFX     R0,R0,#+9,#+1
   \   0000000A   0xF090 0x0001      EORS     R0,R0,#0x1
   \   0000000E   0x....             LDR.N    R1,??DataTable2  ;; 0x400ff050
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0x43C9             MVNS     R1,R1
   \   00000014   0x0BC9             LSRS     R1,R1,#+15
   \   00000016   0xF011 0x0102      ANDS     R1,R1,#0x2
   \   0000001A   0x4308             ORRS     R0,R1,R0
   \   0000001C   0x....             LDR.N    R1,??DataTable2  ;; 0x400ff050
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0x43C9             MVNS     R1,R1
   \   00000022   0x0C09             LSRS     R1,R1,#+16
   \   00000024   0xF011 0x0104      ANDS     R1,R1,#0x4
   \   00000028   0x4308             ORRS     R0,R1,R0
   \   0000002A   0x....             LDR.N    R1,??DataTable2  ;; 0x400ff050
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0x43C9             MVNS     R1,R1
   \   00000030   0x0C49             LSRS     R1,R1,#+17
   \   00000032   0xF011 0x0108      ANDS     R1,R1,#0x8
   \   00000036   0x4308             ORRS     R0,R1,R0
     19              
     20              for(i=0;i<300;i++) ; /*延时再次检测以防止干扰*/
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0xF8AD 0x1000      STRH     R1,[SP, #+0]
   \   0000003E   0xE004             B.N      ??ReadBomaValue_1
   \                     ??ReadBomaValue_2:
   \   00000040   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000044   0x1C49             ADDS     R1,R1,#+1
   \   00000046   0xF8AD 0x1000      STRH     R1,[SP, #+0]
   \                     ??ReadBomaValue_1:
   \   0000004A   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000004E   0xF44F 0x7296      MOV      R2,#+300
   \   00000052   0x4291             CMP      R1,R2
   \   00000054   0xD3F4             BCC.N    ??ReadBomaValue_2
     21              
     22              boma_again=READ_Boma();
   \   00000056   0x....             LDR.N    R1,??DataTable2  ;; 0x400ff050
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0xF3C1 0x2140      UBFX     R1,R1,#+9,#+1
   \   0000005E   0xF091 0x0101      EORS     R1,R1,#0x1
   \   00000062   0x....             LDR.N    R2,??DataTable2  ;; 0x400ff050
   \   00000064   0x6812             LDR      R2,[R2, #+0]
   \   00000066   0x43D2             MVNS     R2,R2
   \   00000068   0x0BD2             LSRS     R2,R2,#+15
   \   0000006A   0xF012 0x0202      ANDS     R2,R2,#0x2
   \   0000006E   0x4311             ORRS     R1,R2,R1
   \   00000070   0x....             LDR.N    R2,??DataTable2  ;; 0x400ff050
   \   00000072   0x6812             LDR      R2,[R2, #+0]
   \   00000074   0x43D2             MVNS     R2,R2
   \   00000076   0x0C12             LSRS     R2,R2,#+16
   \   00000078   0xF012 0x0204      ANDS     R2,R2,#0x4
   \   0000007C   0x4311             ORRS     R1,R2,R1
   \   0000007E   0x....             LDR.N    R2,??DataTable2  ;; 0x400ff050
   \   00000080   0x6812             LDR      R2,[R2, #+0]
   \   00000082   0x43D2             MVNS     R2,R2
   \   00000084   0x0C52             LSRS     R2,R2,#+17
   \   00000086   0xF012 0x0208      ANDS     R2,R2,#0x8
   \   0000008A   0x4311             ORRS     R1,R2,R1
     23              
     24            } while(boma != boma_again);
   \   0000008C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000008E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000090   0x4288             CMP      R0,R1
   \   00000092   0xD1B6             BNE.N    ??ReadBomaValue_0
     25            
     26            return boma;
   \   00000094   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000096   0xB001             ADD      SP,SP,#+4
   \   00000098   0x4770             BX       LR               ;; return
     27          }
     28          

   \                                 In section .text, align 2, keep-with-next
     29          void ExtKeyProc(INT16U * Key)
     30          {
     31            
     32          }
   \                     ExtKeyProc:
   \   00000000   0x4770             BX       LR               ;; return
     33          

   \                                 In section .text, align 2, keep-with-next
     34          void ExtKey_Init(void)
     35          {
   \                     ExtKey_Init:
   \   00000000   0xB580             PUSH     {R7,LR}
     36            PORTE_PCR16 = PORT_PCR_MUX(1) | PORT_PCR_PE_MASK;
   \   00000002   0x....             LDR.N    R0,??DataTable2_1  ;; 0x4004d040
   \   00000004   0xF44F 0x7181      MOV      R1,#+258
   \   00000008   0x6001             STR      R1,[R0, #+0]
     37            PORTE_PCR24 = PORT_PCR_MUX(1) | PORT_PCR_PE_MASK;
   \   0000000A   0x....             LDR.N    R0,??DataTable2_2  ;; 0x4004d060
   \   0000000C   0xF44F 0x7181      MOV      R1,#+258
   \   00000010   0x6001             STR      R1,[R0, #+0]
     38          	                                   /* 使能下拉电阻 */
     39                                                     /* 该中断将被设置为下降沿 */
     40            (void)EnableInt_Kinetis(91);             /* 开启对应的中断 */
   \   00000012   0x205B             MOVS     R0,#+91
   \   00000014   0x.... 0x....      BL       EnableInt_Kinetis
     41            ptrExtKeyProc = ExtKeyProc;
   \   00000018   0x....             LDR.N    R1,??DataTable2_3
   \   0000001A   0x....             LDR.N    R2,??DataTable2_4
   \   0000001C   0x600A             STR      R2,[R1, #+0]
     42            EN_ExtKeyInt();
   \   0000001E   0x....             LDR.N    R1,??DataTable2_1  ;; 0x4004d040
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0xF451 0x2120      ORRS     R1,R1,#0xA0000
   \   00000026   0x....             LDR.N    R2,??DataTable2_1  ;; 0x4004d040
   \   00000028   0x6011             STR      R1,[R2, #+0]
   \   0000002A   0x....             LDR.N    R1,??DataTable2_2  ;; 0x4004d060
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0xF451 0x2120      ORRS     R1,R1,#0xA0000
   \   00000032   0x....             LDR.N    R2,??DataTable2_2  ;; 0x4004d060
   \   00000034   0x6011             STR      R1,[R2, #+0]
     43          }
   \   00000036   0xBD01             POP      {R0,PC}          ;; return
     44          

   \                                 In section .text, align 2, keep-with-next
     45          void Enternet_Init(void)
     46          {
   \                     Enternet_Init:
   \   00000000   0xB580             PUSH     {R7,LR}
     47            PORTC_PCR12 = PORT_PCR_MUX(1) | PORT_PCR_PE_MASK;
   \   00000002   0x....             LDR.N    R0,??DataTable2_5  ;; 0x4004b030
   \   00000004   0xF44F 0x7181      MOV      R1,#+258
   \   00000008   0x6001             STR      R1,[R0, #+0]
     48          	                                   /* 使能下拉电阻 */
     49                                                     /* 该中断将被设置为下降沿 */
     50            (void)EnableInt_Kinetis(89);             /* 开启对应的中断 */
   \   0000000A   0x2059             MOVS     R0,#+89
   \   0000000C   0x.... 0x....      BL       EnableInt_Kinetis
     51            EN_EnternetInt();
   \   00000010   0x....             LDR.N    R1,??DataTable2_5  ;; 0x4004b030
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0xF451 0x2120      ORRS     R1,R1,#0xA0000
   \   00000018   0x....             LDR.N    R2,??DataTable2_5  ;; 0x4004b030
   \   0000001A   0x6011             STR      R1,[R2, #+0]
     52          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x400FF050         DC32     0x400ff050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4004D040         DC32     0x4004d040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x4004D060         DC32     0x4004d060

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     ptrExtKeyProc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     ExtKeyProc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x4004B030         DC32     0x4004b030
     53          
     54          
     55          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  Enternet_Init
             8 -> EnableInt_Kinetis
        0  ExtKeyProc
        8  ExtKey_Init
             8 -> EnableInt_Kinetis
        4  ReadBomaValue


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       2  Boma
      30  Enternet_Init
       2  ExtKeyProc
      56  ExtKey_Init
     154  ReadBomaValue
       4  ptrExtKeyProc

 
   6 bytes in section .bss
 266 bytes in section .text
 
 266 bytes of CODE memory
   6 bytes of DATA memory

Errors: none
Warnings: 2

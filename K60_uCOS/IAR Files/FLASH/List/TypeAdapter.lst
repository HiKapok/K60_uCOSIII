###############################################################################
#                                                                             #
#                                                       03/Nov/2015  20:45:53 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\WangChangan\Desktop\K10小板定稿\TypeAdapter\Typ #
#                    eAdapter.c                                               #
#    Command line =  C:\Users\WangChangan\Desktop\K10小板定稿\TypeAdapter\Typ #
#                    eAdapter.c -D COMPILER_IAR -lCN                          #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\FLASH\List\" -lB "C:\Users\WangChangan\Desktop\K10 #
#                    小板定稿\IAR Files\FLASH\List\" -o                       #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\FLASH\Obj\" --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Project_Headers\" -I                            #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\KinetisDrivers\" -I                             #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\ExtraFunction\" -I                              #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Hardware_Interface\" -I                         #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Make_Decision\" -I                              #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Math\" -I "C:\Users\WangChangan\Desktop\K10小板 #
#                    定稿\IAR Files\..\Original_Process\" -I                  #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Platform\" -I "C:\Users\WangChangan\Desktop\K10 #
#                    小板定稿\IAR Files\..\SD_System\" -I                     #
#                    "C:\Users\WangChangan\Desktop\K10小板定稿\IAR            #
#                    Files\..\Source\" -I "C:\Users\WangChangan\Desktop\K10小 #
#                    板定稿\IAR Files\..\System_Init\" -Ol                    #
#    List file    =  C:\Users\WangChangan\Desktop\K10小板定稿\IAR             #
#                    Files\FLASH\List\TypeAdapter.lst                         #
#    Object file  =  C:\Users\WangChangan\Desktop\K10小板定稿\IAR             #
#                    Files\FLASH\Obj\TypeAdapter.o                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\WangChangan\Desktop\K10小板定稿\TypeAdapter\TypeAdapter.c
      1          /************************************************************************************************
      2          
      3          * TypeAdapter.c
      4          
      5          * 数据类型适配器
      6            
      7          * 主控芯片：MK10DN512VLL10
      8            开发平台：IAR Embedded Workbench 6.3
      9            
     10          * 作者： 王昌安  (第十届摄像头)  
     11          
     12          ************************************************************************************************/
     13          #include "./TypeAdapter.h"
     14          #include <stdio.h>
     15          #include <stdlib.h>
     16          #include <string.h>
     17          

   \                                 In section .text, align 4, keep-with-next
     18          void gTypeAdapter(ParamSt *stValue)
     19          {
   \                     gTypeAdapter:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0006             MOVS     R6,R0
     20            char temp[20]={'\0'};
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0x2114             MOVS     R1,#+20
   \   0000000A   0x.... 0x....      BL       __aeabi_memclr4
     21            char * pStrBase = stValue->lpstr + stValue->orgLength;
   \   0000000E   0x7C30             LDRB     R0,[R6, #+16]
   \   00000010   0x68B1             LDR      R1,[R6, #+8]
   \   00000012   0x1844             ADDS     R4,R0,R1
     22            char * pSrcStr = temp;
   \   00000014   0xAD00             ADD      R5,SP,#+0
     23            switch (stValue->typeID)
   \   00000016   0x7C70             LDRB     R0,[R6, #+17]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD00B             BEQ.N    ??gTypeAdapter_0
   \   0000001C   0x2802             CMP      R0,#+2
   \   0000001E   0xD01C             BEQ.N    ??gTypeAdapter_1
   \   00000020   0xD311             BCC.N    ??gTypeAdapter_2
   \   00000022   0x2804             CMP      R0,#+4
   \   00000024   0xD02C             BEQ.N    ??gTypeAdapter_3
   \   00000026   0xD321             BCC.N    ??gTypeAdapter_4
   \   00000028   0x2806             CMP      R0,#+6
   \   0000002A   0xD03B             BEQ.N    ??gTypeAdapter_5
   \   0000002C   0xD331             BCC.N    ??gTypeAdapter_6
   \   0000002E   0x2807             CMP      R0,#+7
   \   00000030   0xD045             BEQ.N    ??gTypeAdapter_7
   \   00000032   0xE050             B.N      ??gTypeAdapter_8
     24            {
     25            case Type_INT8U:
     26              stValue->Data.u8Data=*((INT8U *)stValue->pData);
   \                     ??gTypeAdapter_0:
   \   00000034   0x68F0             LDR      R0,[R6, #+12]
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0x7030             STRB     R0,[R6, #+0]
     27              sprintf(temp,"%d",stValue->Data.u8Data);
   \   0000003A   0x7832             LDRB     R2,[R6, #+0]
   \   0000003C   0xA12C             ADR.N    R1,??gTypeAdapter_9  ;; 0x25, 0x64, 0x00, 0x00
   \   0000003E   0xA800             ADD      R0,SP,#+0
   \   00000040   0x.... 0x....      BL       sprintf
     28              break;
   \   00000044   0xE04C             B.N      ??gTypeAdapter_10
     29            case Type_INT8S:
     30              stValue->Data.s8Data=*((INT8S *)stValue->pData);
   \                     ??gTypeAdapter_2:
   \   00000046   0x68F0             LDR      R0,[R6, #+12]
   \   00000048   0x7800             LDRB     R0,[R0, #+0]
   \   0000004A   0x7030             STRB     R0,[R6, #+0]
     31              sprintf(temp,"%d",stValue->Data.s8Data);
   \   0000004C   0xF996 0x2000      LDRSB    R2,[R6, #+0]
   \   00000050   0xA127             ADR.N    R1,??gTypeAdapter_9  ;; 0x25, 0x64, 0x00, 0x00
   \   00000052   0xA800             ADD      R0,SP,#+0
   \   00000054   0x.... 0x....      BL       sprintf
     32              break;
   \   00000058   0xE042             B.N      ??gTypeAdapter_10
     33            case Type_INT16U:
     34              stValue->Data.u16Data=*((INT16U *)stValue->pData);
   \                     ??gTypeAdapter_1:
   \   0000005A   0x68F0             LDR      R0,[R6, #+12]
   \   0000005C   0x8800             LDRH     R0,[R0, #+0]
   \   0000005E   0x8030             STRH     R0,[R6, #+0]
     35              sprintf(temp,"%d",stValue->Data.u16Data);
   \   00000060   0x8832             LDRH     R2,[R6, #+0]
   \   00000062   0xA123             ADR.N    R1,??gTypeAdapter_9  ;; 0x25, 0x64, 0x00, 0x00
   \   00000064   0xA800             ADD      R0,SP,#+0
   \   00000066   0x.... 0x....      BL       sprintf
     36              break;
   \   0000006A   0xE039             B.N      ??gTypeAdapter_10
     37            case Type_INT16S:
     38              stValue->Data.s16Data=*((INT16S *)stValue->pData);
   \                     ??gTypeAdapter_4:
   \   0000006C   0x68F0             LDR      R0,[R6, #+12]
   \   0000006E   0x8800             LDRH     R0,[R0, #+0]
   \   00000070   0x8030             STRH     R0,[R6, #+0]
     39              sprintf(temp,"%d",stValue->Data.s16Data);
   \   00000072   0xF9B6 0x2000      LDRSH    R2,[R6, #+0]
   \   00000076   0xA11E             ADR.N    R1,??gTypeAdapter_9  ;; 0x25, 0x64, 0x00, 0x00
   \   00000078   0xA800             ADD      R0,SP,#+0
   \   0000007A   0x.... 0x....      BL       sprintf
     40              break;
   \   0000007E   0xE02F             B.N      ??gTypeAdapter_10
     41            case Type_INT32U:
     42              stValue->Data.u32Data=*((INT32U *)stValue->pData);
   \                     ??gTypeAdapter_3:
   \   00000080   0x68F0             LDR      R0,[R6, #+12]
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x6030             STR      R0,[R6, #+0]
     43              sprintf(temp,"%d",stValue->Data.u32Data);
   \   00000086   0x6832             LDR      R2,[R6, #+0]
   \   00000088   0xA119             ADR.N    R1,??gTypeAdapter_9  ;; 0x25, 0x64, 0x00, 0x00
   \   0000008A   0xA800             ADD      R0,SP,#+0
   \   0000008C   0x.... 0x....      BL       sprintf
     44              break;
   \   00000090   0xE026             B.N      ??gTypeAdapter_10
     45            case Type_INT32S:
     46              stValue->Data.s32Data=*((INT32S *)stValue->pData);
   \                     ??gTypeAdapter_6:
   \   00000092   0x68F0             LDR      R0,[R6, #+12]
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0x6030             STR      R0,[R6, #+0]
     47              sprintf(temp,"%d",stValue->Data.s32Data);
   \   00000098   0x6832             LDR      R2,[R6, #+0]
   \   0000009A   0xA115             ADR.N    R1,??gTypeAdapter_9  ;; 0x25, 0x64, 0x00, 0x00
   \   0000009C   0xA800             ADD      R0,SP,#+0
   \   0000009E   0x.... 0x....      BL       sprintf
     48              break;
   \   000000A2   0xE01D             B.N      ??gTypeAdapter_10
     49            case Type_FP32:
     50              stValue->Data.fData=*((FP32 *)stValue->pData);
   \                     ??gTypeAdapter_5:
   \   000000A4   0x68F0             LDR      R0,[R6, #+12]
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0x6030             STR      R0,[R6, #+0]
     51              sprintf(temp,"%-.2f",stValue->Data.fData);
   \   000000AA   0x6830             LDR      R0,[R6, #+0]
   \   000000AC   0x.... 0x....      BL       __aeabi_f2d
   \   000000B0   0x0002             MOVS     R2,R0
   \   000000B2   0x000B             MOVS     R3,R1
   \   000000B4   0x490F             LDR.N    R1,??gTypeAdapter_9+0x4
   \   000000B6   0xA800             ADD      R0,SP,#+0
   \   000000B8   0x.... 0x....      BL       sprintf
     52              break;
   \   000000BC   0xE010             B.N      ??gTypeAdapter_10
     53            case Type_FP64:
     54              stValue->Data.lfData=*((FP64 *)stValue->pData);
   \                     ??gTypeAdapter_7:
   \   000000BE   0x68F0             LDR      R0,[R6, #+12]
   \   000000C0   0xE9D0 0x2300      LDRD     R2,R3,[R0, #+0]
   \   000000C4   0xE9C6 0x2300      STRD     R2,R3,[R6, #+0]
     55              sprintf(temp,"%-.2lf",stValue->Data.lfData);
   \   000000C8   0xE9D6 0x2300      LDRD     R2,R3,[R6, #+0]
   \   000000CC   0x490A             LDR.N    R1,??gTypeAdapter_9+0x8
   \   000000CE   0xA800             ADD      R0,SP,#+0
   \   000000D0   0x.... 0x....      BL       sprintf
     56              break;
   \   000000D4   0xE004             B.N      ??gTypeAdapter_10
     57            default:
     58              break;  
   \                     ??gTypeAdapter_8:
   \   000000D6   0xE003             B.N      ??gTypeAdapter_10
     59            }
     60            while('\0' != *pSrcStr)
     61            {
     62              *pStrBase = *pSrcStr; 
   \                     ??gTypeAdapter_11:
   \   000000D8   0x7828             LDRB     R0,[R5, #+0]
   \   000000DA   0x7020             STRB     R0,[R4, #+0]
     63              pSrcStr++;
   \   000000DC   0x1C6D             ADDS     R5,R5,#+1
     64              pStrBase++;
   \   000000DE   0x1C64             ADDS     R4,R4,#+1
     65            }
   \                     ??gTypeAdapter_10:
   \   000000E0   0x7828             LDRB     R0,[R5, #+0]
   \   000000E2   0x2800             CMP      R0,#+0
   \   000000E4   0xD1F8             BNE.N    ??gTypeAdapter_11
     66            *pStrBase = *pSrcStr; 
   \   000000E6   0x7828             LDRB     R0,[R5, #+0]
   \   000000E8   0x7020             STRB     R0,[R4, #+0]
     67          }
   \   000000EA   0xB006             ADD      SP,SP,#+24
   \   000000EC   0xBD70             POP      {R4-R6,PC}       ;; return
   \   000000EE   0xBF00             Nop      
   \                     ??gTypeAdapter_9:
   \   000000F0   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00
   \              0x00 0x00    
   \   000000F4   0x........         DC32     `?<Constant "%-.2f">`
   \   000000F8   0x........         DC32     `?<Constant "%-.2lf">`

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x64          DC8 "%d"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%-.2f">`:
   \   00000000   0x25 0x2D          DC8 "%-.2f"
   \              0x2E 0x32    
   \              0x66 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%-.2lf">`:
   \   00000000   0x25 0x2D          DC8 "%-.2lf"
   \              0x2E 0x32    
   \              0x6C 0x66    
   \              0x00         
   \   00000007   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       40  gTypeAdapter
             40 -> __aeabi_f2d
             40 -> __aeabi_memclr4
             40 -> sprintf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "%-.2f">
       8  ?<Constant "%-.2lf">
       4  ?<Constant "%d">
      20  ?<Constant {0}>
     252  gTypeAdapter

 
  40 bytes in section .rodata
 252 bytes in section .text
 
 252 bytes of CODE  memory
  40 bytes of CONST memory

Errors: none
Warnings: none
